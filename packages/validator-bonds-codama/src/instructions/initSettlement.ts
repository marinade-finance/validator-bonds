/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const INIT_SETTLEMENT_DISCRIMINATOR = new Uint8Array([
  152, 178, 0, 65, 52, 210, 247, 58,
])

export function getInitSettlementDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_SETTLEMENT_DISCRIMINATOR,
  )
}

export type InitSettlementInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountSettlement extends string | IAccountMeta<string> = string,
  TAccountSettlementClaims extends string | IAccountMeta<string> = string,
  TAccountOperatorAuthority extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountSettlement extends string
        ? WritableAccount<TAccountSettlement>
        : TAccountSettlement,
      TAccountSettlementClaims extends string
        ? WritableAccount<TAccountSettlementClaims>
        : TAccountSettlementClaims,
      TAccountOperatorAuthority extends string
        ? ReadonlySignerAccount<TAccountOperatorAuthority> &
            IAccountSignerMeta<TAccountOperatorAuthority>
        : TAccountOperatorAuthority,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type InitSettlementInstructionData = {
  discriminator: ReadonlyUint8Array
  /**
   * merkle root for this settlement, multiple settlements can be created with the same merkle root,
   * settlements will be distinguished by the vote_account
   */
  merkleRoot: ReadonlyUint8Array
  /** maximal number of lamports that can be claimed from this settlement */
  maxTotalClaim: bigint
  /** maximal number of merkle tree nodes that can be claimed from this settlement */
  maxMerkleNodes: bigint
  /** collects the rent exempt from the settlement account when closed */
  rentCollector: Address
  /** epoch that the settlement is created for */
  epoch: bigint
}

export type InitSettlementInstructionDataArgs = {
  /**
   * merkle root for this settlement, multiple settlements can be created with the same merkle root,
   * settlements will be distinguished by the vote_account
   */
  merkleRoot: ReadonlyUint8Array
  /** maximal number of lamports that can be claimed from this settlement */
  maxTotalClaim: number | bigint
  /** maximal number of merkle tree nodes that can be claimed from this settlement */
  maxMerkleNodes: number | bigint
  /** collects the rent exempt from the settlement account when closed */
  rentCollector: Address
  /** epoch that the settlement is created for */
  epoch: number | bigint
}

export function getInitSettlementInstructionDataEncoder(): Encoder<InitSettlementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['maxTotalClaim', getU64Encoder()],
      ['maxMerkleNodes', getU64Encoder()],
      ['rentCollector', getAddressEncoder()],
      ['epoch', getU64Encoder()],
    ]),
    value => ({ ...value, discriminator: INIT_SETTLEMENT_DISCRIMINATOR }),
  )
}

export function getInitSettlementInstructionDataDecoder(): Decoder<InitSettlementInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['maxTotalClaim', getU64Decoder()],
    ['maxMerkleNodes', getU64Decoder()],
    ['rentCollector', getAddressDecoder()],
    ['epoch', getU64Decoder()],
  ])
}

export function getInitSettlementInstructionDataCodec(): Codec<
  InitSettlementInstructionDataArgs,
  InitSettlementInstructionData
> {
  return combineCodec(
    getInitSettlementInstructionDataEncoder(),
    getInitSettlementInstructionDataDecoder(),
  )
}

export type InitSettlementInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountSettlement extends string = string,
  TAccountSettlementClaims extends string = string,
  TAccountOperatorAuthority extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  settlement: Address<TAccountSettlement>
  settlementClaims: Address<TAccountSettlementClaims>
  /** operator signer authority that is allowed to create the settlement account */
  operatorAuthority: TransactionSigner<TAccountOperatorAuthority>
  /** rent exempt payer of account creation */
  rentPayer: TransactionSigner<TAccountRentPayer>
  systemProgram?: Address<TAccountSystemProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  merkleRoot: InitSettlementInstructionDataArgs['merkleRoot']
  maxTotalClaim: InitSettlementInstructionDataArgs['maxTotalClaim']
  maxMerkleNodes: InitSettlementInstructionDataArgs['maxMerkleNodes']
  rentCollector: InitSettlementInstructionDataArgs['rentCollector']
  epoch: InitSettlementInstructionDataArgs['epoch']
}

export function getInitSettlementInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountSettlement extends string,
  TAccountSettlementClaims extends string,
  TAccountOperatorAuthority extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: InitSettlementInput<
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountSettlementClaims,
    TAccountOperatorAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitSettlementInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountSettlement,
  TAccountSettlementClaims,
  TAccountOperatorAuthority,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    settlement: { value: input.settlement ?? null, isWritable: true },
    settlementClaims: {
      value: input.settlementClaims ?? null,
      isWritable: true,
    },
    operatorAuthority: {
      value: input.operatorAuthority ?? null,
      isWritable: false,
    },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.settlement),
      getAccountMeta(accounts.settlementClaims),
      getAccountMeta(accounts.operatorAuthority),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getInitSettlementInstructionDataEncoder().encode(
      args as InitSettlementInstructionDataArgs,
    ),
  } as InitSettlementInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountSettlementClaims,
    TAccountOperatorAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedInitSettlementInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    settlement: TAccountMetas[2]
    settlementClaims: TAccountMetas[3]
    /** operator signer authority that is allowed to create the settlement account */
    operatorAuthority: TAccountMetas[4]
    /** rent exempt payer of account creation */
    rentPayer: TAccountMetas[5]
    systemProgram: TAccountMetas[6]
    eventAuthority: TAccountMetas[7]
    program: TAccountMetas[8]
  }
  data: InitSettlementInstructionData
}

export function parseInitSettlementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitSettlementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      settlement: getNextAccount(),
      settlementClaims: getNextAccount(),
      operatorAuthority: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitSettlementInstructionDataDecoder().decode(instruction.data),
  }
}
