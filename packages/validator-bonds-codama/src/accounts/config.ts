/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const CONFIG_DISCRIMINATOR = new Uint8Array([
  155, 12, 170, 224, 30, 250, 204, 130,
])

export function getConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIG_DISCRIMINATOR)
}

export type Config = {
  discriminator: ReadonlyUint8Array
  /** Admin authority that can update the config */
  adminAuthority: Address
  /** Operator authority (bot hot wallet) */
  operatorAuthority: Address
  /** How many epochs permitting to claim the settlement */
  epochsToClaimSettlement: bigint
  /** How many epochs before withdraw is allowed */
  withdrawLockupEpochs: bigint
  /** Minimum amount of lamports to be considered for a stake account operations (e.g., split) */
  minimumStakeLamports: bigint
  /** PDA bonds stake accounts authority bump seed */
  bondsWithdrawerAuthorityBump: number
  /** Authority that can pause the program in case of emergency */
  pauseAuthority: Address
  paused: boolean
  /** How many slots to wait before settlement is permitted to be claimed */
  slotsToStartSettlementClaiming: bigint
  /** Minimum value of max_stake_wanted to be configured by vote account owners at bond. */
  minBondMaxStakeWanted: bigint
  /** reserved space for future changes */
  reserved: ReadonlyUint8Array
}

export type ConfigArgs = {
  /** Admin authority that can update the config */
  adminAuthority: Address
  /** Operator authority (bot hot wallet) */
  operatorAuthority: Address
  /** How many epochs permitting to claim the settlement */
  epochsToClaimSettlement: number | bigint
  /** How many epochs before withdraw is allowed */
  withdrawLockupEpochs: number | bigint
  /** Minimum amount of lamports to be considered for a stake account operations (e.g., split) */
  minimumStakeLamports: number | bigint
  /** PDA bonds stake accounts authority bump seed */
  bondsWithdrawerAuthorityBump: number
  /** Authority that can pause the program in case of emergency */
  pauseAuthority: Address
  paused: boolean
  /** How many slots to wait before settlement is permitted to be claimed */
  slotsToStartSettlementClaiming: number | bigint
  /** Minimum value of max_stake_wanted to be configured by vote account owners at bond. */
  minBondMaxStakeWanted: number | bigint
  /** reserved space for future changes */
  reserved: ReadonlyUint8Array
}

export function getConfigEncoder(): Encoder<ConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['adminAuthority', getAddressEncoder()],
      ['operatorAuthority', getAddressEncoder()],
      ['epochsToClaimSettlement', getU64Encoder()],
      ['withdrawLockupEpochs', getU64Encoder()],
      ['minimumStakeLamports', getU64Encoder()],
      ['bondsWithdrawerAuthorityBump', getU8Encoder()],
      ['pauseAuthority', getAddressEncoder()],
      ['paused', getBooleanEncoder()],
      ['slotsToStartSettlementClaiming', getU64Encoder()],
      ['minBondMaxStakeWanted', getU64Encoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 463)],
    ]),
    value => ({ ...value, discriminator: CONFIG_DISCRIMINATOR }),
  )
}

export function getConfigDecoder(): Decoder<Config> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['adminAuthority', getAddressDecoder()],
    ['operatorAuthority', getAddressDecoder()],
    ['epochsToClaimSettlement', getU64Decoder()],
    ['withdrawLockupEpochs', getU64Decoder()],
    ['minimumStakeLamports', getU64Decoder()],
    ['bondsWithdrawerAuthorityBump', getU8Decoder()],
    ['pauseAuthority', getAddressDecoder()],
    ['paused', getBooleanDecoder()],
    ['slotsToStartSettlementClaiming', getU64Decoder()],
    ['minBondMaxStakeWanted', getU64Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 463)],
  ])
}

export function getConfigCodec(): Codec<ConfigArgs, Config> {
  return combineCodec(getConfigEncoder(), getConfigDecoder())
}

export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Config, TAddress>
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Config, TAddress>
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Config, TAddress> | MaybeAccount<Config, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigDecoder(),
  )
}

export async function fetchConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Config, TAddress>> {
  const maybeAccount = await fetchMaybeConfig(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Config, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeConfig(maybeAccount)
}

export async function fetchAllConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Config>[]> {
  const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Config>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeConfig(maybeAccount))
}

export function getConfigSize(): number {
  return 609
}
