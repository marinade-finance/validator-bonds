/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_WITHDRAW_REQUEST_DISCRIMINATOR = new Uint8Array([
  142, 31, 222, 215, 83, 79, 34, 49,
]);

export function getInitWithdrawRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_WITHDRAW_REQUEST_DISCRIMINATOR
  );
}

export type InitWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountBond extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountWithdrawRequest extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountWithdrawRequest extends string
        ? WritableAccount<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitWithdrawRequestInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type InitWithdrawRequestInstructionDataArgs = {
  amount: number | bigint;
};

export function getInitWithdrawRequestInstructionDataEncoder(): FixedSizeEncoder<InitWithdrawRequestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INIT_WITHDRAW_REQUEST_DISCRIMINATOR,
    })
  );
}

export function getInitWithdrawRequestInstructionDataDecoder(): FixedSizeDecoder<InitWithdrawRequestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getInitWithdrawRequestInstructionDataCodec(): FixedSizeCodec<
  InitWithdrawRequestInstructionDataArgs,
  InitWithdrawRequestInstructionData
> {
  return combineCodec(
    getInitWithdrawRequestInstructionDataEncoder(),
    getInitWithdrawRequestInstructionDataDecoder()
  );
}

export type InitWithdrawRequestInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** the config account under which the bond was created */
  config: Address<TAccountConfig>;
  bond: Address<TAccountBond>;
  voteAccount: Address<TAccountVoteAccount>;
  /** validator vote account node identity or bond authority may ask for the withdrawal */
  authority: TransactionSigner<TAccountAuthority>;
  withdrawRequest: Address<TAccountWithdrawRequest>;
  /** rent exempt payer of withdraw request account creation */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  amount: InitWithdrawRequestInstructionDataArgs['amount'];
};

export function getInitWithdrawRequestInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountVoteAccount extends string,
  TAccountAuthority extends string,
  TAccountWithdrawRequest extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: InitWithdrawRequestInput<
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitWithdrawRequestInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountVoteAccount,
  TAccountAuthority,
  TAccountWithdrawRequest,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitWithdrawRequestInstructionDataEncoder().encode(
      args as InitWithdrawRequestInstructionDataArgs
    ),
    programAddress,
  } as InitWithdrawRequestInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** the config account under which the bond was created */
    config: TAccountMetas[0];
    bond: TAccountMetas[1];
    voteAccount: TAccountMetas[2];
    /** validator vote account node identity or bond authority may ask for the withdrawal */
    authority: TAccountMetas[3];
    withdrawRequest: TAccountMetas[4];
    /** rent exempt payer of withdraw request account creation */
    rentPayer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: InitWithdrawRequestInstructionData;
};

export function parseInitWithdrawRequestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitWithdrawRequestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      voteAccount: getNextAccount(),
      authority: getNextAccount(),
      withdrawRequest: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitWithdrawRequestInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
