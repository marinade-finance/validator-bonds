agents:
  queue: "snapshots"

env:
  gs_bucket: gs://marinade-validator-bonds-mainnet
  SLACK_API: https://slack.com/api/chat.postMessage

steps:
  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/fund-settlements'
    concurrency: 1

  - wait: ~

  - input: "What is slack feed to emit messages into?"
    fields:
      - select: "Slack feed"
        key: "slack_feed"
        options:
          - label: "Feed Pipeline SAM PSR"
            value: "feed-pipeline-sam-psr"
          - label: "Feed Institutional Staking"
            value: "feed-institutional-staking"
    if: "build.env('SLACK_FEED') == null && build.env('NOTIFY_FEED') == 'true'"
    blocked_state: running

  - wait: ~

  - label: ":black_nib: Env variables setup: Fund Settlements"
    commands:
    - |
      epoch=${EPOCH:-$(buildkite-agent meta-data get epoch || echo "")}
      if [[ -n "$$epoch" ]]; then
        buildkite-agent meta-data set epoch "$$epoch"
      else
        unset epoch
      fi
    - |
      claim_type=${CLAIM_TYPE:-$(buildkite-agent meta-data get claim_type || echo "")}
      if [[ -n "$$claim_type" ]]; then
        buildkite-agent meta-data set claim_type "$$claim_type"
      else
        unset claim_type
      fi
    - |
      slack_feed=${SLACK_FEED:-$(buildkite-agent meta-data get slack_feed || echo "")}
      if [[ -n "$$slack_feed" ]]; then
        buildkite-agent meta-data set slack_feed "$$slack_feed"
      else
        unset slack_feed
      fi
    - |
      echo "Epoch: '$$epoch', Claim Type: '$$claim_type', Slack Feed: '$$slack_feed'"

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build fund-settlement"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin fund-settlement'
    artifact_paths:
      - target/release/fund-settlement

  - label: ":surfer: Loading JSON settlements data"
    env:
      past_epochs_to_load: 3
      # epoch when the contract v2 was deployed, using different structure of merkle tree than v1
      starting_epoch_contract_v2: 640
    commands:
    - claim_type=$(buildkite-agent meta-data get claim_type) || true
    - epoch=$(buildkite-agent meta-data get epoch) || true
    - |
      if [[ -z "$$epoch" ]]; then
        current_epoch=$(curl --silent "$$RPC_URL" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getEpochInfo"}' | jq '.result.epoch')
        epochs_start_index=$((current_epoch - past_epochs_to_load))
        latest_funded_epoch=$((current_epoch - 1))
      else
        current_epoch=$$epoch
        epochs_start_index=$$epoch
        latest_funded_epoch=$$epoch
      fi
    - buildkite-agent meta-data set latest_funded_epoch "$$latest_funded_epoch"
    - |
      merkle_trees=$(buildkite-agent artifact search "merkle-trees/*" || echo "")
      if [[ "x$$merkle_trees" != "x" && ! "$$merkle_trees" =~ 'fatal' ]]; then
        echo "Merkle trees already downloaded"
        exit 0
      fi
    - 'mkdir ./merkle-trees/'
    - |
      for epoch in $(seq $$epochs_start_index $$current_epoch); do
        if [[ $$epoch -lt $$starting_epoch_contract_v2 ]]; then
          echo "Skipping epoch $$epoch, because it's before the contract v2 deployment epoch $$starting_epoch_contract_v2"
          continue
        fi
        if [[ -z "$$claim_type" ]]; then
          for merkle_tree_file in $(gcloud storage ls "$gs_bucket/$$epoch/*settlement-merkle-trees.json"); do
            base_name=$(basename "$$merkle_tree_file")
            prefix_name="$${base_name%settlement-merkle-trees.json}"
            target_dir="./merkle-trees/$${epoch}_$${prefix_name%-*}/"
            mkdir -p "$$target_dir"
            gcloud storage cp "$gs_bucket/$$epoch/$${prefix_name}settlement-merkle-trees.json" "$$target_dir"
            gcloud storage cp "$gs_bucket/$$epoch/$${prefix_name}settlements.json" "$$target_dir"
          done
        else
          target_dir="./merkle-trees/$${epoch}_$${claim_type}/"
          mkdir -p "$$target_dir"
          gcloud storage cp "$gs_bucket/$$epoch/$${claim_type}-settlement-merkle-trees.json" "$$target_dir"
          gcloud storage cp "$gs_bucket/$$epoch/$${claim_type}-settlements.json" "$$target_dir"
        fi
      done
    artifact_paths:
      - "./merkle-trees/**/*"

  - wait: ~

  - label: ":campfire::arrow_right: Fund settlements"
    env:
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,solana_transaction_executor=debug,fund_settlement=debug
    commands:
    - . "$HOME/.cargo/env"
    - prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))
    - command_name='fund-settlement'
    - buildkite-agent artifact download --include-retried-jobs execution-report.$$command_name.$$prior_build_number . || true
    - |
      cp "execution-report.$$command_name.$$prior_build_number" "execution-report.$$command_name.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "fund-execution-report.$$command_name.$$prior_build_number"
      echo "#ATTEMPT FUND SETTLEMENT $$BUILDKITE_RETRY_COUNT" | tee -a "./execution-report.$$command_name.$$BUILDKITE_RETRY_COUNT"
    - |
      buildkite-agent artifact download --include-retried-jobs "merkle-trees/*" .
      files=""
      for dir in ./merkle-trees/*; do
        if [ -d "$$dir" ]; then
          pair_files=""
          for file in "$$dir"/*; do
            pair_files="$$pair_files $$file"
          done
          files="$$files -f $$pair_files"
        fi
      done
    - buildkite-agent artifact download --include-retried-jobs target/release/fund-settlement .
    - chmod +x target/release/fund-settlement
    - source ./scripts/execute-handlers.sh
    - |
      handle_command_execution "$$command_name" \
      ./target/release/fund-settlement \
        --rpc-url "$$RPC_URL" \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$PSR_TX_FEE_WALLET" \
        --marinade-wallet "$$PSR_MARINADE_DAO_FUNDER_WALLET" \
        --rent-payer "$$PSR_RENT_PAYER_WALLET" \
        $$files
    key: 'fund-settlement'
    artifact_paths:
      - "./execution-report.*"
    retry:
      automatic:
        - exit_status: 100
          limit: 5

  - label: ":memo: Notification setup: Fund Settlements"
    commands:
     - mkdir ./reports
     - command_name='fund-settlement'
     - buildkite-agent artifact download --include-retried-jobs "execution-report.$$command_name.*" ./reports/ || echo "No report ERROR" > ./reports/execution-report.$$command_name.error
     - report_path="./reports/$(ls -v1 reports/ | tail -n 1)"
     - cp "$$report_path" ./fund-report.txt
     - buildkite-agent meta-data set --redacted-vars='' attempts_count "$(grep -c ATTEMPT ./fund-report.txt)"
    artifact_paths:
    - "./fund-report.txt"
    key: 'notification-setup-funding'
    depends_on: "fund-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":floppy_disk: :arrow_right: :cloud: Upload artifacts Fund Settlements"
    commands:
    - latest_funded_epoch=$(buildkite-agent meta-data get latest_funded_epoch) || true
    - claim_type=$(buildkite-agent meta-data get claim_type) || true
    - claim_type_prefix=$([[ -z "$$claim_type" ]] && echo "" || echo "$${claim_type}-")
    - buildkite-agent artifact download --include-retried-jobs fund-report.txt . || echo "UNKNOWN ERROR" > fund-report.txt
    - |
      if [[ -n "$$latest_funded_epoch" && $(gcloud storage ls "$gs_bucket/$$latest_funded_epoch" 2> /dev/null) ]]; then
        gcloud storage cp ./fund-report.txt "$gs_bucket/$$latest_funded_epoch/buildkite/$${claim_type_prefix}fund-settlement-report.$(date +%s).txt"
      fi
    depends_on: "notification-setup-funding"
    allow_dependency_failure: true

  - label: ":mega: Notification Funding"
    commands:
    - buildkite-agent artifact download --include-retried-jobs fund-report.txt . || echo 'UNKNOWN ERROR' > './fund-report.txt'
    - cat ./fund-report.txt
    - echo "--------------------------------------------\n\n"
    - source ./scripts/execute-handlers.sh
    - check_command_execution_status "fund-settlement" || true
    - |
      claim_type=$(buildkite-agent meta-data get claim_type) || true
      [[ -n "$$claim_type" ]] && claim_type=" [$$claim_type]"
    - slack_feed=$(buildkite-agent meta-data get slack_feed)
    - attempts_count=$(buildkite-agent meta-data get attempts_count || echo "UNKNOWN")
    - |
      curl $SLACK_API -X POST -H 'Content-Type: application/json; charset=utf-8' \
        -H "Authorization: Bearer $$SLACK_BEARER_TOKEN" -d '{
        "channel": "'"$$slack_feed"'",
        "attachments": [{
          "color": "'"$$notification_color"'",
          "title": "Fund Settlements '"$${notification_result}$${claim_type}"', '"$$attempts_count"' attempts",
          "title_link": "'"$${BUILDKITE_BUILD_URL}/#$${BUILDKITE_JOB_ID}"'",
          "footer": "<'"$${BUILDKITE_BUILD_URL}/#$${BUILDKITE_JOB_ID}"'|View in Buildkite>" 
        }]
      }'
    depends_on: "notification-setup-funding"
    allow_dependency_failure: true
    if: "build.env('NOTIFY_FEED') == 'true'"

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/fund-settlements'
    concurrency: 1
