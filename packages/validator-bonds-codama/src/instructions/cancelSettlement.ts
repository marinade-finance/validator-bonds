/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CANCEL_SETTLEMENT_DISCRIMINATOR = new Uint8Array([
  33, 241, 96, 62, 228, 178, 1, 120,
])

export function getCancelSettlementDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_SETTLEMENT_DISCRIMINATOR,
  )
}

export type CancelSettlementInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountSettlement extends string | IAccountMeta<string> = string,
  TAccountSettlementClaims extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountBondsWithdrawerAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountRentCollector extends string | IAccountMeta<string> = string,
  TAccountSplitRentCollector extends string | IAccountMeta<string> = string,
  TAccountSplitRentRefundAccount extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountSettlement extends string
        ? WritableAccount<TAccountSettlement>
        : TAccountSettlement,
      TAccountSettlementClaims extends string
        ? WritableAccount<TAccountSettlementClaims>
        : TAccountSettlementClaims,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountBondsWithdrawerAuthority extends string
        ? ReadonlyAccount<TAccountBondsWithdrawerAuthority>
        : TAccountBondsWithdrawerAuthority,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      TAccountSplitRentCollector extends string
        ? WritableAccount<TAccountSplitRentCollector>
        : TAccountSplitRentCollector,
      TAccountSplitRentRefundAccount extends string
        ? WritableAccount<TAccountSplitRentRefundAccount>
        : TAccountSplitRentRefundAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type CancelSettlementInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type CancelSettlementInstructionDataArgs = {}

export function getCancelSettlementInstructionDataEncoder(): Encoder<CancelSettlementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({ ...value, discriminator: CANCEL_SETTLEMENT_DISCRIMINATOR }),
  )
}

export function getCancelSettlementInstructionDataDecoder(): Decoder<CancelSettlementInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getCancelSettlementInstructionDataCodec(): Codec<
  CancelSettlementInstructionDataArgs,
  CancelSettlementInstructionData
> {
  return combineCodec(
    getCancelSettlementInstructionDataEncoder(),
    getCancelSettlementInstructionDataDecoder(),
  )
}

export type CancelSettlementInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountSettlement extends string = string,
  TAccountSettlementClaims extends string = string,
  TAccountAuthority extends string = string,
  TAccountBondsWithdrawerAuthority extends string = string,
  TAccountRentCollector extends string = string,
  TAccountSplitRentCollector extends string = string,
  TAccountSplitRentRefundAccount extends string = string,
  TAccountClock extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  /** settlement to close whenever the operator decides */
  settlement: Address<TAccountSettlement>
  settlementClaims: Address<TAccountSettlementClaims>
  /** Cancelling is permitted only to emergency or operator authority */
  authority: TransactionSigner<TAccountAuthority>
  bondsWithdrawerAuthority: Address<TAccountBondsWithdrawerAuthority>
  rentCollector: Address<TAccountRentCollector>
  splitRentCollector: Address<TAccountSplitRentCollector>
  /**
   * The stake account is funded to the settlement and credited to the bond's validator vote account.
   * The lamports are utilized to pay back the rent exemption of the split_stake_account
   */
  splitRentRefundAccount: Address<TAccountSplitRentRefundAccount>
  clock: Address<TAccountClock>
  stakeProgram: Address<TAccountStakeProgram>
  stakeHistory: Address<TAccountStakeHistory>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getCancelSettlementInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountSettlement extends string,
  TAccountSettlementClaims extends string,
  TAccountAuthority extends string,
  TAccountBondsWithdrawerAuthority extends string,
  TAccountRentCollector extends string,
  TAccountSplitRentCollector extends string,
  TAccountSplitRentRefundAccount extends string,
  TAccountClock extends string,
  TAccountStakeProgram extends string,
  TAccountStakeHistory extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: CancelSettlementInput<
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountSettlementClaims,
    TAccountAuthority,
    TAccountBondsWithdrawerAuthority,
    TAccountRentCollector,
    TAccountSplitRentCollector,
    TAccountSplitRentRefundAccount,
    TAccountClock,
    TAccountStakeProgram,
    TAccountStakeHistory,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CancelSettlementInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountSettlement,
  TAccountSettlementClaims,
  TAccountAuthority,
  TAccountBondsWithdrawerAuthority,
  TAccountRentCollector,
  TAccountSplitRentCollector,
  TAccountSplitRentRefundAccount,
  TAccountClock,
  TAccountStakeProgram,
  TAccountStakeHistory,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    bond: { value: input.bond ?? null, isWritable: false },
    settlement: { value: input.settlement ?? null, isWritable: true },
    settlementClaims: {
      value: input.settlementClaims ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    bondsWithdrawerAuthority: {
      value: input.bondsWithdrawerAuthority ?? null,
      isWritable: false,
    },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
    splitRentCollector: {
      value: input.splitRentCollector ?? null,
      isWritable: true,
    },
    splitRentRefundAccount: {
      value: input.splitRentRefundAccount ?? null,
      isWritable: true,
    },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.settlement),
      getAccountMeta(accounts.settlementClaims),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.bondsWithdrawerAuthority),
      getAccountMeta(accounts.rentCollector),
      getAccountMeta(accounts.splitRentCollector),
      getAccountMeta(accounts.splitRentRefundAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCancelSettlementInstructionDataEncoder().encode({}),
  } as CancelSettlementInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountSettlementClaims,
    TAccountAuthority,
    TAccountBondsWithdrawerAuthority,
    TAccountRentCollector,
    TAccountSplitRentCollector,
    TAccountSplitRentRefundAccount,
    TAccountClock,
    TAccountStakeProgram,
    TAccountStakeHistory,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedCancelSettlementInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    /** settlement to close whenever the operator decides */
    settlement: TAccountMetas[2]
    settlementClaims: TAccountMetas[3]
    /** Cancelling is permitted only to emergency or operator authority */
    authority: TAccountMetas[4]
    bondsWithdrawerAuthority: TAccountMetas[5]
    rentCollector: TAccountMetas[6]
    splitRentCollector: TAccountMetas[7]
    /**
     * The stake account is funded to the settlement and credited to the bond's validator vote account.
     * The lamports are utilized to pay back the rent exemption of the split_stake_account
     */

    splitRentRefundAccount: TAccountMetas[8]
    clock: TAccountMetas[9]
    stakeProgram: TAccountMetas[10]
    stakeHistory: TAccountMetas[11]
    eventAuthority: TAccountMetas[12]
    program: TAccountMetas[13]
  }
  data: CancelSettlementInstructionData
}

export function parseCancelSettlementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCancelSettlementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      settlement: getNextAccount(),
      settlementClaims: getNextAccount(),
      authority: getNextAccount(),
      bondsWithdrawerAuthority: getNextAccount(),
      rentCollector: getNextAccount(),
      splitRentCollector: getNextAccount(),
      splitRentRefundAccount: getNextAccount(),
      clock: getNextAccount(),
      stakeProgram: getNextAccount(),
      stakeHistory: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCancelSettlementInstructionDataDecoder().decode(instruction.data),
  }
}
