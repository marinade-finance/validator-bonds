agents:
  queue: "snapshots"

env:
  gs_bucket: gs://marinade-validator-bonds-mainnet
  MARINADE_SCORING_API_URL: https://scoring.marinade.finance/api/v1
  SLACK_API: https://slack.com/api/chat.postMessage
  SLACK_FEED: "feed-pipeline-sam-psr"
  CLAIM_TYPE: "bid-distribution"
  # Total Marinade (distributor) fee split between Marinade and DAO
  MARINADE_FEE_BPS: 950
  MARINADE_FEE_STAKE_AUTHORITY: BBaQsiRo744NAYaqL3nKRfgeJayoqVicEQsEnLpfsJ6x
  MARINADE_FEE_WITHDRAW_AUTHORITY: BBaQsiRo744NAYaqL3nKRfgeJayoqVicEQsEnLpfsJ6x
  # DAO share of the total Marinade (distributor) fee
  DAO_FEE_SPLIT_SHARE_BPS: 5000
  DAO_FEE_STAKE_AUTHORITY: mDAo14E6YJfEHcVZLcc235RVjviypmKMhftq7jeiLJz
  DAO_FEE_WITHDRAW_AUTHORITY: mDAo14E6YJfEHcVZLcc235RVjviypmKMhftq7jeiLJz

steps:
  - label: ":hammer_and_wrench: :rust: Build"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin bid-distribution-cli'
    artifact_paths:
      - target/release/bid-distribution-cli

  - input: "What is the epoch to generate settlements for?"
    fields:
      - text: "Epoch"
        key: "epoch"
        format: "[0-9]+"
    if: "build.env('EPOCH') == null"
    blocked_state: running

  - wait: ~

  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/prepare-bid-distribution'
    concurrency: 1

  - wait: ~

  - label: ":black_nib: Env variables setup"
    commands:
    - |
      epoch=${EPOCH:-$(buildkite-agent meta-data get epoch)}
      buildkite-agent meta-data set --redacted-vars='' epoch "$$epoch"
      echo "Epoch: '$$epoch'"

  - wait: ~

  - label: ":floppy_disk: :arrow_left: :cloud: Downloading Input JSON data"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - |
      curl -s "${MARINADE_SCORING_API_URL}/scores/sam?epoch=$$epoch" -o sam-scores.json
      if [ $(jq '. | length' ./sam-scores.json) -eq 0 ]; then
        echo "No SAM scores found for epoch $$epoch"
        exit 1
      fi
      gcloud storage cp "$gs_bucket/$$epoch/stakes.json" "."
    key: 'download-json'
    artifact_paths:
      - "./*.json"

  - wait: ~

  - label: ":scales: Evaluate Marinade Bids"
    env:
      WHITELIST_STAKE_AUTHORITY: stWirqFCf2Uts1JBL1Jsd3r6VBWhgnpdPxCTe1MFjrq,4bZ6o3eUUNXhKuqjdCnCoPAoLgWiuLYixKaxoa8PpiKk,ex9CfkBZZd6Nv9XdnoDmmB45ymbu4arXVk7g5pWnt3N
    commands:
    - 'buildkite-agent artifact download --include-retried-jobs sam-scores.json .'
    - 'buildkite-agent artifact download --include-retried-jobs stakes.json .'
    - 'buildkite-agent artifact download --include-retried-jobs target/release/bid-distribution-cli .'
    - 'chmod +x target/release/bid-distribution-cli'
    - |
      ./target/release/bid-distribution-cli \
        --sam-meta-collection ./sam-scores.json \
        --stake-meta-collection ./stakes.json \
        --marinade-fee-bps ${MARINADE_FEE_BPS} \
        --marinade-fee-stake-authority ${MARINADE_FEE_STAKE_AUTHORITY} \
        --marinade-fee-withdraw-authority ${MARINADE_FEE_WITHDRAW_AUTHORITY} \
        --dao-fee-split-share-bps ${DAO_FEE_SPLIT_SHARE_BPS} \
        --dao-fee-stake-authority ${DAO_FEE_STAKE_AUTHORITY} \
        --dao-fee-withdraw-authority ${DAO_FEE_WITHDRAW_AUTHORITY} \
        --output-settlement-collection "./${CLAIM_TYPE}-settlements.json" \
        --output-merkle-tree-collection "./${CLAIM_TYPE}-settlement-merkle-trees.json"
    artifact_paths:
    - "./${CLAIM_TYPE}*.json"

  # Evaluation of dynamic fees for bidding
  - label: ":scales: Evaluate Marinade Bids - Marinade Fee 0"
    env:
      WHITELIST_STAKE_AUTHORITY: stWirqFCf2Uts1JBL1Jsd3r6VBWhgnpdPxCTe1MFjrq,4bZ6o3eUUNXhKuqjdCnCoPAoLgWiuLYixKaxoa8PpiKk,ex9CfkBZZd6Nv9XdnoDmmB45ymbu4arXVk7g5pWnt3N
    commands:
    - buildkite-agent artifact download --include-retried-jobs sam-scores.json .
    - buildkite-agent artifact download --include-retried-jobs stakes.json .
    - buildkite-agent artifact download --include-retried-jobs target/release/bid-distribution-cli .
    - chmod +x target/release/bid-distribution-cli
    - |
      ./target/release/bid-distribution-cli \
        --sam-meta-collection ./sam-scores.json \
        --stake-meta-collection ./stakes.json \
        --marinade-fee-bps 0 \
        --marinade-fee-stake-authority ${MARINADE_FEE_STAKE_AUTHORITY} \
        --marinade-fee-withdraw-authority ${MARINADE_FEE_WITHDRAW_AUTHORITY} \
        --dao-fee-split-share-bps 0 \
        --dao-fee-stake-authority ${DAO_FEE_STAKE_AUTHORITY} \
        --dao-fee-withdraw-authority ${DAO_FEE_WITHDRAW_AUTHORITY} \
        --output-settlement-collection "./${CLAIM_TYPE}-settlements.json" \
        --output-merkle-tree-collection "./${CLAIM_TYPE}-settlement-merkle-trees.json"
    - claim_amount=$(jq '[.settlements[].claims_amount] | add' "./${CLAIM_TYPE}-settlements.json")
    - 'echo "Total claims with Marinade fee 0 bps: $$claim_amount"'

  - wait: ~

  - label: "ðŸ““ Generating report"
    commands:
    - 'buildkite-agent artifact download --include-retried-jobs ${CLAIM_TYPE}-settlements.json .'
    - |
      ./scripts/generate-discord-public-report.bash "./${CLAIM_TYPE}-settlements.json" "Bidding" > "./discord-public-report.txt"
    artifact_paths:
      - "./discord-public-report.txt"

  - wait: ~

  - label: ":floppy_disk: :arrow_right: :cloud: Upload artifacts Prepare Bid Distribution"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - buildkite-agent artifact download --include-retried-jobs ${CLAIM_TYPE}-settlements.json .
    - buildkite-agent artifact download --include-retried-jobs ${CLAIM_TYPE}-settlement-merkle-trees.json .
    - buildkite-agent artifact download --include-retried-jobs discord-public-report.txt .
    - gcloud storage cp "./${CLAIM_TYPE}-settlements.json" "$gs_bucket/$$epoch/"
    - gcloud storage cp "./${CLAIM_TYPE}-settlement-merkle-trees.json" "$gs_bucket/$$epoch/"
    - gcloud storage cp "./discord-public-report.txt" "$gs_bucket/$$epoch/${CLAIM_TYPE}-discord-public-report.txt"

  - wait: ~

  - label: ":mega: Notification"
    commands:
      - |
        epoch=$(buildkite-agent meta-data get epoch)
        curl ${SLACK_API} -X POST -H 'Content-Type: application/json; charset=utf-8' \
          -H "Authorization: Bearer $$SLACK_BEARER_TOKEN" -d '{
            "channel": "'"$SLACK_FEED"'",
            "attachments": [
              {
                "color": "#8000ff",
                "title": "Claims for Validator Bonds ('"${CLAIM_TYPE}"') generated ('"$$epoch"').",
                "title_link": "'"$$BUILDKITE_BUILD_URL"'",
                "footer": "<'"$$BUILDKITE_BUILD_URL"'|View in Buildkite>"
              }
            ]
        }'
    if: "build.env('NOTIFY_FEED') == 'true'"

  - wait: ~

  - label: ":gear: Setup init-settlements trigger"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - |
      cat <<EOF | buildkite-agent pipeline upload
      steps:
        - trigger: "init-settlements"
          label: ":rocket: Trigger: Init settlements ($$epoch)/($CLAIM_TYPE)"
          async: true
          build:
            branch: $$BUILDKITE_BRANCH
            env:
              EPOCH: $$epoch
              CLAIM_TYPE: $CLAIM_TYPE
              NOTIFY_FEED: $NOTIFY_FEED
              NOTIFY_DISCORD_FEED: true
              SLACK_FEED: $SLACK_FEED
              gs_bucket: $gs_bucket
      EOF

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/prepare-bid-distribution'
    concurrency: 1
