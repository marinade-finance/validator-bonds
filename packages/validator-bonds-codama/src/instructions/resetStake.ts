/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESET_STAKE_DISCRIMINATOR = new Uint8Array([
  183, 37, 69, 159, 163, 139, 212, 235,
]);

export function getResetStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RESET_STAKE_DISCRIMINATOR);
}

export type ResetStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountBond extends string | AccountMeta<string> = string,
  TAccountSettlement extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountBondsWithdrawerAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountStakeConfig extends string | AccountMeta<string> = string,
  TAccountClock extends string | AccountMeta<string> = string,
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountSettlement extends string
        ? ReadonlyAccount<TAccountSettlement>
        : TAccountSettlement,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountBondsWithdrawerAuthority extends string
        ? ReadonlyAccount<TAccountBondsWithdrawerAuthority>
        : TAccountBondsWithdrawerAuthority,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResetStakeInstructionData = { discriminator: ReadonlyUint8Array };

export type ResetStakeInstructionDataArgs = {};

export function getResetStakeInstructionDataEncoder(): FixedSizeEncoder<ResetStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RESET_STAKE_DISCRIMINATOR })
  );
}

export function getResetStakeInstructionDataDecoder(): FixedSizeDecoder<ResetStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResetStakeInstructionDataCodec(): FixedSizeCodec<
  ResetStakeInstructionDataArgs,
  ResetStakeInstructionData
> {
  return combineCodec(
    getResetStakeInstructionDataEncoder(),
    getResetStakeInstructionDataDecoder()
  );
}

export type ResetStakeInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountSettlement extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountBondsWithdrawerAuthority extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountClock extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** the config account under which the bond was created */
  config: Address<TAccountConfig>;
  bond: Address<TAccountBond>;
  /** cannot exist; used to derive settlement authority */
  settlement: Address<TAccountSettlement>;
  /** stake account belonging under the settlement by staker authority */
  stakeAccount: Address<TAccountStakeAccount>;
  /**
   * bonds withdrawer authority
   * to cancel settlement funding of the stake account changing staker authority to address
   */
  bondsWithdrawerAuthority: Address<TAccountBondsWithdrawerAuthority>;
  voteAccount: Address<TAccountVoteAccount>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  clock: Address<TAccountClock>;
  stakeProgram: Address<TAccountStakeProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getResetStakeInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountSettlement extends string,
  TAccountStakeAccount extends string,
  TAccountBondsWithdrawerAuthority extends string,
  TAccountVoteAccount extends string,
  TAccountStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountClock extends string,
  TAccountStakeProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: ResetStakeInput<
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountStakeAccount,
    TAccountBondsWithdrawerAuthority,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResetStakeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountSettlement,
  TAccountStakeAccount,
  TAccountBondsWithdrawerAuthority,
  TAccountVoteAccount,
  TAccountStakeHistory,
  TAccountStakeConfig,
  TAccountClock,
  TAccountStakeProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    settlement: { value: input.settlement ?? null, isWritable: false },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    bondsWithdrawerAuthority: {
      value: input.bondsWithdrawerAuthority ?? null,
      isWritable: false,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.settlement),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.bondsWithdrawerAuthority),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getResetStakeInstructionDataEncoder().encode({}),
    programAddress,
  } as ResetStakeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountSettlement,
    TAccountStakeAccount,
    TAccountBondsWithdrawerAuthority,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedResetStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** the config account under which the bond was created */
    config: TAccountMetas[0];
    bond: TAccountMetas[1];
    /** cannot exist; used to derive settlement authority */
    settlement: TAccountMetas[2];
    /** stake account belonging under the settlement by staker authority */
    stakeAccount: TAccountMetas[3];
    /**
     * bonds withdrawer authority
     * to cancel settlement funding of the stake account changing staker authority to address
     */
    bondsWithdrawerAuthority: TAccountMetas[4];
    voteAccount: TAccountMetas[5];
    stakeHistory: TAccountMetas[6];
    stakeConfig: TAccountMetas[7];
    clock: TAccountMetas[8];
    stakeProgram: TAccountMetas[9];
    eventAuthority: TAccountMetas[10];
    program: TAccountMetas[11];
  };
  data: ResetStakeInstructionData;
};

export function parseResetStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResetStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      settlement: getNextAccount(),
      stakeAccount: getNextAccount(),
      bondsWithdrawerAuthority: getNextAccount(),
      voteAccount: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      clock: getNextAccount(),
      stakeProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getResetStakeInstructionDataDecoder().decode(instruction.data),
  };
}
