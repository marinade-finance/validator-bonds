agents:
  queue: "snapshots"

steps:
  # epoch number provided in ENV and then waiting for confirmation to proceed
  # or waiting to be prompted by the user after notification is sent
  - input: "What is the epoch to init settlements for?"
    fields:
      - text: "Epoch"
        key: "epoch"
        format: "[0-9]+"
    if: "build.env('EPOCH') == null"
  - command: "echo 'Epoch is: $EPOCH'"
    if: "build.env('EPOCH') != null"

  - input: "What is the claim type to init?"
    fields:
      - select: "Claim type"
        key: "claim_type"
        options:
          - label: "Protected Events"
            value: "protected-events"
          - label: "Bidding"
            value: "bidding"
    if: "build.env('CLAIM_TYPE') == null"

  - wait: ~

  - label: ":mega: Notification initializing settlements"
    commands:
    - discord_webhook="${DISCORD_WEBHOOK:-$$DISCORD_WEBHOOK_VALIDATOR_BONDS}"
    - buildkite-agent meta-data set discord_webhook "$$discord_webhook"
    - epoch=${EPOCH:-$(buildkite-agent meta-data get epoch)}
    - buildkite-agent meta-data set epoch "$$epoch"
    - claim_type=$(buildkite-agent meta-data get claim_type)
    - 'echo "Epoch: $$epoch"'
    - |
      curl "$$discord_webhook" \
        -H "Content-Type: application/json" -d '{
        "embeds": [
          {
            "title": "Confirm Settlements Initialization for Validator Bonds ('"$$epoch"')/("'$$claim_type'").",
            "description": "Please review the 'Unblock' if ready to proceed.",
            "url": "'"$$BUILDKITE_BUILD_URL"'",
            "color": "8388863"
          }
        ]
      }'

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build init-settlement"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin init-settlement'
    artifact_paths:
      - target/release/init-settlement

  - label: ":floppy_disk: :arrow_left: :cloud: Downloading merkle trees"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - claim_type=$(buildkite-agent meta-data get claim_type)
    - |
      gcloud storage cp "$$gs_bucket/$$epoch/$${claim_type}-settlement-merkle-trees.json" "./settlement-merkle-trees.json"
      gcloud storage cp "$$gs_bucket/$$epoch/$${claim_type}-settlements.json" "./settlements.json"
    key: 'download-json'
    artifact_paths:
      - "./settlement-merkle-trees.json"
      - "./settlements.json"

  - label: ":black_nib: Settlement JSON listing"
    commands:
     - buildkite-agent artifact download --include-retried-jobs settlement-merkle-trees.json .
     - buildkite-agent artifact download --include-retried-jobs settlements.json .
     - bash ./scripts/settlement-json-listing.sh --settlements settlements.json --merkle-trees settlement-merkle-trees.json
    depends_on: "download-json"

  - wait: ~

  - block: "Confirm to get processed init settlements"
    prompt: "Please review the 'Unblock' if ready to proceed."
    blocked_state: running

  - wait: ~

  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/init-settlements${CLAIM_TYPE}'
    concurrency: 1

  - wait: ~

  - label: ":campfire::arrow_right: Create settlements"
    env:
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,builder_executor=debug,solana_transaction_executor=debug,settlement_pipelines=debug,init_settlement=debug
      #  RUST_BACKTRACE: full
    commands:
    - . "$HOME/.cargo/env"
    - epoch=$(buildkite-agent meta-data get epoch)
    - prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))
    - buildkite-agent artifact download --include-retried-jobs init-execution-report.$$prior_build_number . || true
    - |
      cp "init-execution-report.$$prior_build_number" "init-execution-report.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "init-execution-report.$$prior_build_number"
      echo "#ATTEMPT $$BUILDKITE_RETRY_COUNT" | tee -a "./init-execution-report.$$BUILDKITE_RETRY_COUNT"
    - buildkite-agent artifact download --include-retried-jobs target/release/init-settlement .
    - buildkite-agent artifact download --include-retried-jobs settlement-merkle-trees.json .
    - buildkite-agent artifact download --include-retried-jobs settlements.json .
    - chmod +x target/release/init-settlement
    - |
      set -o pipefail
      ./target/release/init-settlement \
        --rpc-url $$RPC_URL \
        --input-merkle-tree-collection "./settlement-merkle-trees.json" \
        --input-settlement-collection "./settlements.json" \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$PSR_TX_FEE_WALLET" \
        --rent-payer "$$PSR_RENT_PAYER_WALLET" \
        --epoch "$$epoch" | tee -a "./init-execution-report.$$BUILDKITE_RETRY_COUNT"
    key: 'init-settlement'
    artifact_paths:
    - "./init-execution-report.*"
    retry:
      automatic:
        - exit_status: 100
          limit: 5

  - label: ":memo: Notification setup: Init Settlements"
    commands:
     - 'epoch=$(buildkite-agent meta-data get epoch)'
     - |
        build_result=$(buildkite-agent step get "outcome" --step "init-settlement")
        if [[ -z "$$build_result" || "$$build_result" =~ "failed" ]]; then
          notification_result="FAILED"
          notification_color="15158332"
        else
          notification_result="SUCCEEDED"
          notification_color="52224"
        fi
     - 'buildkite-agent meta-data set notification_color "$$notification_color"'
     - 'buildkite-agent meta-data set notification_result "$$notification_result"'
     - 'echo "Notification result: $$notification_result, color: $$notification_color"'
     - 'mkdir ./reports'
     - 'buildkite-agent artifact download --include-retried-jobs "init-execution-report.*" ./reports/ || echo "No report ERROR" > ./reports/init-execution-report.error'
     - 'report_path="./reports/$(ls -v1 reports/ | tail -n 1)"'
     - 'cp "$$report_path" ./init-report.txt'
     - 'buildkite-agent meta-data set attempts_count "$(grep -c ATTEMPT ./init-report.txt)"'
    artifact_paths:
    - "./init-report.txt"
    key: 'notification-setup-init'
    depends_on: "init-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":floppy_disk: :arrow_right: :cloud: Upload artifacts"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - claim_type=$(buildkite-agent meta-data get claim_type)
    - buildkite-agent artifact download --include-retried-jobs init-report.txt . || echo "UNKNOWN ERROR" > init-report.txt
    - gcloud storage cp ./init-report.txt "$$gs_bucket/$$epoch/$${claim_type}-init-settlement-report.$(date +%s).txt"

  - wait: ~

  - label: ":mega: Notification Initializing Settlements"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - discord_webhook=$(buildkite-agent meta-data get discord_webhook)
    - notification_result=$(buildkite-agent meta-data get notification_result || echo "UNKNOWN")
    - notification_color=$(buildkite-agent meta-data get notification_color || echo "15158332")
    - attempts_count=$(buildkite-agent meta-data get attempts_count || echo "UNKNOWN")
    - buildkite-agent artifact download --include-retried-jobs init-report.txt . || echo "UNKNOWN ERROR" > init-report.txt
    - |
        curl "$$discord_webhook" \
        -F 'payload_json={
            "embeds":[{
              "title": "Init Settlements '"$notification_result"' for Validator Bonds ('"$$epoch"') after '"$$attempts_count"' attempts",
              "url": "'"$$BUILDKITE_BUILD_URL"'",
              "color": "'"$$notification_color"'"
            }]
        }' \
        -F "file1=@./init-report.txt"
    depends_on: "notification-setup-init"
    allow_dependency_failure: true

  - wait: ~
    continue_on_failure: true

  - label: ":gear: Upload and trigger fund-settlements pipeline"
    commands:
      - 'epoch=$(buildkite-agent meta-data get epoch)'
      - 'echo "Epoch: $$epoch"'
      - 'buildkite-agent pipeline upload .buildkite/fund-settlements.yml'
    depends_on: "init-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/init-settlements${CLAIM_TYPE}'
    concurrency: 1
