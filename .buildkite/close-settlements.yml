agents:
  queue: "snapshots"

env:
  gs_bucket: gs://marinade-validator-bonds-mainnet
  SLACK_API: https://slack.com/api/chat.postMessage

steps:
  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/close-settlements-${CLAIM_TYPE}'
    concurrency: 1

  - input: "What is the Bonds Config type to close?"
    fields:
      - select: "Claim type"
        key: "claim_type"
        options:
          - label: "Bidding Settlements"
            value: "bid"
          - label: "Institutional Settlements"
            value: "institutional"
    if: "build.env('CLAIM_TYPE') == null"
    blocked_state: running

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin list-settlement'
    - 'cargo build --release --bin close-settlement'
    artifact_paths:
      - target/release/list-settlement
      - target/release/close-settlement

  - label: ":black_nib: Env variables setup: Close Settlements"
    commands:
    - |
      claim_type=${CLAIM_TYPE:-$(buildkite-agent meta-data get claim_type)}
      buildkite-agent meta-data set --redacted-vars='' claim_type "$$claim_type"
      config_pubkey=$(./scripts/bonds-config-pubkey.sh "$$claim_type")
      buildkite-agent meta-data set --redacted-vars='' config_pubkey "$$config_pubkey"
    - |
      slack_feed=$(./scripts/bonds-slack-feed.sh "$$claim_type")
      buildkite-agent meta-data set --redacted-vars='' slack_feed "$$slack_feed"
    - |
      echo "Claim Type: '$$claim_type'/'$$config_pubkey'"

  - wait: ~

  - label: " Loading past settlements data"
    env:
      config_epochs_non_closable: 3 # configured onchain in config
      past_epochs_to_load: 5
      # epoch when the contract v2 was deployed, using different structure of merkle tree than v1
      starting_epoch_contract_v2: 640
    commands:
    - |
      set -x
      current_epoch=$(curl --silent "$$RPC_URL" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getEpochInfo"}' | jq '.result.epoch')
      epochs_end_index=$((current_epoch - config_epochs_non_closable))
      epochs_start_index=$((epochs_end_index - past_epochs_to_load))
    - |
      claim_type=$(buildkite-agent meta-data get claim_type)
      claim_type_prefix="$${claim_type%%-*}"
    - 'mkdir ./merkle-trees/'
    - |
      if [[ $$epochs_start_index -lt 1 ]]; then
        echo "No found any epoch to start to load settlement JSON files"
        exit 1
      fi
    - latest_funded_epoch=''
    - |
      for epoch in $(seq $$epochs_start_index $$epochs_end_index); do
        if [[ $$epoch -lt $$starting_epoch_contract_v2 ]]; then
          echo "Skipping epoch $$epoch, because it's before the contract v2 deployment epoch $$starting_epoch_contract_v2"
          continue
        fi
        for merkle_tree_file in $(gcloud storage ls "$gs_bucket/$$epoch/$${claim_type_prefix}*settlement-merkle-trees.json"); do
          base_name=$(basename "$$merkle_tree_file")
          gcloud storage cp "$$merkle_tree_file" "./merkle-trees/$${epoch}_$${base_name}"
        done
        latest_funded_epoch=$$epoch
      done
    - buildkite-agent meta-data set --redacted-vars='' latest_funded_epoch "$$latest_funded_epoch"
    artifact_paths:
      - "./merkle-trees/*"

  - wait: ~

  - label: ":campfire: List past settlements"
    env:
      RPC_URL: "$$RPC_URL"
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,solana_transaction_executor=debug,list_settlement=debug
    commands:
    - . "$HOME/.cargo/env"
    - buildkite-agent artifact download --include-retried-jobs "merkle-trees/*" .
    - buildkite-agent artifact download --include-retried-jobs target/release/list-settlement .
    - chmod +x target/release/list-settlement
    - |
      ./target/release/list-settlement \
        -m ./merkle-trees/* \
        --config $(buildkite-agent meta-data get config_pubkey) \
        --out ./past-settlements.json
    artifact_paths:
      - "./past-settlements.json"

  - wait: ~

  - label: ":campfire::arrow_right: Close settlements"
    env:
      RPC_URL: "$$RPC_URL"
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,solana_transaction_executor=debug,close_settlement=debug
      # RUST_BACKTRACE: full
    commands:
    - . "$HOME/.cargo/env"
    - prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))
    - command_name='close-settlement'
    - buildkite-agent artifact download --include-retried-jobs execution-report.$$command_name.$$prior_build_number . || true
    - |
      cp "execution-report.$$command_name.$$prior_build_number" "execution-report.$$command_name.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "execution-report.$$command_name.$$prior_build_number"
      echo "#ATTEMPT CLOSE SETTLEMENTS $$BUILDKITE_RETRY_COUNT" | tee -a "./execution-report.$$command_name.$$BUILDKITE_RETRY_COUNT"
    - buildkite-agent artifact download --include-retried-jobs target/release/close-settlement .
    - buildkite-agent artifact download --include-retried-jobs past-settlements.json .
    - chmod +x target/release/close-settlement
    - source ./scripts/execute-handlers.sh
    - |
      handle_command_execution "close-settlement" \
      ./target/release/close-settlement \
        --config $(buildkite-agent meta-data get config_pubkey) \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$PSR_TX_FEE_WALLET" \
        --marinade-wallet "$$PSR_MARINADE_DAO_FUNDER_WALLET" \
        --past-settlements ./past-settlements.json
    key: 'close-settlement'
    artifact_paths:
      - "./execution-report.*"
    retry:
      automatic:
        - exit_status: 100
          limit: 5

  - label: ":memo: Notification setup: Close Settlements"
    commands:
    - mkdir ./reports
    - command_name='close-settlement'
    - buildkite-agent artifact download --include-retried-jobs "execution-report.$$command_name.*" ./reports/ || echo "No report ERROR" > ./reports/execution-report.$$command_name.error
    - report_path="./reports/$(ls -v1 reports/ | tail -n 1)"
    - cp "$$report_path" ./close-report.txt
    - buildkite-agent meta-data set --redacted-vars='' attempts_count "$(grep -c ATTEMPT ./close-report.txt)"
    artifact_paths:
    - "./close-report.txt"
    key: 'notification-setup-close'
    depends_on: "close-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":floppy_disk: :arrow_right: :cloud: Upload artifacts Close Settlements"
    commands:
    - latest_funded_epoch=$(buildkite-agent meta-data get latest_funded_epoch)
    - buildkite-agent artifact download --include-retried-jobs close-report.txt . || echo "UNKNOWN ERROR" > close-report.txt
    - gcloud storage cp ./close-report.txt "$gs_bucket/$$latest_funded_epoch/buildkite/close-settlement-report.$(date +%s).txt"
    depends_on: "notification-setup-close"
    allow_dependency_failure: true

  - label: ":mega: Notification Closing"
    commands:
    - buildkite-agent artifact download --include-retried-jobs close-report.txt . || echo 'UNKNOWN ERROR' > './close-report.txt'
    - cat ./close-report.txt
    - echo "--------------------------------------------"
    - source ./scripts/execute-handlers.sh
    - check_command_execution_status "close-settlement" || true
    - claim_type=$(buildkite-agent meta-data get claim_type)
    - config_pubkey=$(buildkite-agent meta-data get config_pubkey)
    - attempts_count=$(buildkite-agent meta-data get attempts_count || echo "UNKNOWN")
    - |
      curl ${SLACK_API} -X POST -H 'Content-Type: application/json; charset=utf-8' \
        -H "Authorization: Bearer $$SLACK_BEARER_TOKEN" -d '{
          "channel": "'$(buildkite-agent meta-data get slack_feed)'",
          "attachments": [
            {
              "color": "'"$$notification_color"'",
              "title": "Close '"$$claim_type"' Settlements '"$$notification_result"', '"$$attempts_count"' attempts",
              "title_link": "'"$${BUILDKITE_BUILD_URL}/#$${BUILDKITE_JOB_ID}"'",
              "text": "Claim type: '"$$claim_type"'/'"$$config_pubkey"'",
              "footer": "<'"$${BUILDKITE_BUILD_URL}/#$${BUILDKITE_JOB_ID}"'|View in Buildkite>"
            }
          ]
      }'
    depends_on: "notification-setup-close"
    allow_dependency_failure: true
    if: "build.env('NOTIFY_FEED') == 'true'"

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/close-settlements-${CLAIM_TYPE}'
    concurrency: 1
