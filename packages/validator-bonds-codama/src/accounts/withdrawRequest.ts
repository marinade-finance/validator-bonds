/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const WITHDRAW_REQUEST_DISCRIMINATOR = new Uint8Array([
  186, 239, 174, 191, 189, 13, 47, 196,
])

export function getWithdrawRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_REQUEST_DISCRIMINATOR,
  )
}

export type WithdrawRequest = {
  discriminator: ReadonlyUint8Array
  /** Validator vote account that requested the withdrawal */
  voteAccount: Address
  /** Bond account that the withdraw request is for (has to match with vote_account) */
  bond: Address
  /** Epoch when the withdrawal was requested, i.e., when this "ticket" is created */
  epoch: bigint
  /** Amount of lamports to withdraw */
  requestedAmount: bigint
  /** Amount of lamports withdrawn so far */
  withdrawnAmount: bigint
  /** PDA account bump */
  bump: number
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export type WithdrawRequestArgs = {
  /** Validator vote account that requested the withdrawal */
  voteAccount: Address
  /** Bond account that the withdraw request is for (has to match with vote_account) */
  bond: Address
  /** Epoch when the withdrawal was requested, i.e., when this "ticket" is created */
  epoch: number | bigint
  /** Amount of lamports to withdraw */
  requestedAmount: number | bigint
  /** Amount of lamports withdrawn so far */
  withdrawnAmount: number | bigint
  /** PDA account bump */
  bump: number
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export function getWithdrawRequestEncoder(): Encoder<WithdrawRequestArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['voteAccount', getAddressEncoder()],
      ['bond', getAddressEncoder()],
      ['epoch', getU64Encoder()],
      ['requestedAmount', getU64Encoder()],
      ['withdrawnAmount', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 93)],
    ]),
    value => ({ ...value, discriminator: WITHDRAW_REQUEST_DISCRIMINATOR }),
  )
}

export function getWithdrawRequestDecoder(): Decoder<WithdrawRequest> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['voteAccount', getAddressDecoder()],
    ['bond', getAddressDecoder()],
    ['epoch', getU64Decoder()],
    ['requestedAmount', getU64Decoder()],
    ['withdrawnAmount', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 93)],
  ])
}

export function getWithdrawRequestCodec(): Codec<
  WithdrawRequestArgs,
  WithdrawRequest
> {
  return combineCodec(getWithdrawRequestEncoder(), getWithdrawRequestDecoder())
}

export function decodeWithdrawRequest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<WithdrawRequest, TAddress>
export function decodeWithdrawRequest<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<WithdrawRequest, TAddress>
export function decodeWithdrawRequest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<WithdrawRequest, TAddress>
  | MaybeAccount<WithdrawRequest, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWithdrawRequestDecoder(),
  )
}

export async function fetchWithdrawRequest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<WithdrawRequest, TAddress>> {
  const maybeAccount = await fetchMaybeWithdrawRequest(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeWithdrawRequest<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<WithdrawRequest, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeWithdrawRequest(maybeAccount)
}

export async function fetchAllWithdrawRequest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<WithdrawRequest>[]> {
  const maybeAccounts = await fetchAllMaybeWithdrawRequest(
    rpc,
    addresses,
    config,
  )
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeWithdrawRequest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<WithdrawRequest>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeWithdrawRequest(maybeAccount))
}

export function getWithdrawRequestSize(): number {
  return 190
}
