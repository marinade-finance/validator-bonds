/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CONFIGURE_CONFIG_DISCRIMINATOR = new Uint8Array([
  198, 98, 161, 165, 137, 200, 230, 203,
]);

export function getConfigureConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIGURE_CONFIG_DISCRIMINATOR
  );
}

export type ConfigureConfigInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountAdminAuthority extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAdminAuthority extends string
        ? ReadonlySignerAccount<TAccountAdminAuthority> &
            AccountSignerMeta<TAccountAdminAuthority>
        : TAccountAdminAuthority,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ConfigureConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  admin: Option<Address>;
  operator: Option<Address>;
  pauseAuthority: Option<Address>;
  epochsToClaimSettlement: Option<bigint>;
  withdrawLockupEpochs: Option<bigint>;
  minimumStakeLamports: Option<bigint>;
  slotsToStartSettlementClaiming: Option<bigint>;
  minBondMaxStakeWanted: Option<bigint>;
};

export type ConfigureConfigInstructionDataArgs = {
  admin: OptionOrNullable<Address>;
  operator: OptionOrNullable<Address>;
  pauseAuthority: OptionOrNullable<Address>;
  epochsToClaimSettlement: OptionOrNullable<number | bigint>;
  withdrawLockupEpochs: OptionOrNullable<number | bigint>;
  minimumStakeLamports: OptionOrNullable<number | bigint>;
  slotsToStartSettlementClaiming: OptionOrNullable<number | bigint>;
  minBondMaxStakeWanted: OptionOrNullable<number | bigint>;
};

export function getConfigureConfigInstructionDataEncoder(): Encoder<ConfigureConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getOptionEncoder(getAddressEncoder())],
      ['operator', getOptionEncoder(getAddressEncoder())],
      ['pauseAuthority', getOptionEncoder(getAddressEncoder())],
      ['epochsToClaimSettlement', getOptionEncoder(getU64Encoder())],
      ['withdrawLockupEpochs', getOptionEncoder(getU64Encoder())],
      ['minimumStakeLamports', getOptionEncoder(getU64Encoder())],
      ['slotsToStartSettlementClaiming', getOptionEncoder(getU64Encoder())],
      ['minBondMaxStakeWanted', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CONFIGURE_CONFIG_DISCRIMINATOR })
  );
}

export function getConfigureConfigInstructionDataDecoder(): Decoder<ConfigureConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getOptionDecoder(getAddressDecoder())],
    ['operator', getOptionDecoder(getAddressDecoder())],
    ['pauseAuthority', getOptionDecoder(getAddressDecoder())],
    ['epochsToClaimSettlement', getOptionDecoder(getU64Decoder())],
    ['withdrawLockupEpochs', getOptionDecoder(getU64Decoder())],
    ['minimumStakeLamports', getOptionDecoder(getU64Decoder())],
    ['slotsToStartSettlementClaiming', getOptionDecoder(getU64Decoder())],
    ['minBondMaxStakeWanted', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getConfigureConfigInstructionDataCodec(): Codec<
  ConfigureConfigInstructionDataArgs,
  ConfigureConfigInstructionData
> {
  return combineCodec(
    getConfigureConfigInstructionDataEncoder(),
    getConfigureConfigInstructionDataDecoder()
  );
}

export type ConfigureConfigInput<
  TAccountConfig extends string = string,
  TAccountAdminAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  /** only the admin authority can change the config params */
  adminAuthority: TransactionSigner<TAccountAdminAuthority>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  admin: ConfigureConfigInstructionDataArgs['admin'];
  operator: ConfigureConfigInstructionDataArgs['operator'];
  pauseAuthority: ConfigureConfigInstructionDataArgs['pauseAuthority'];
  epochsToClaimSettlement: ConfigureConfigInstructionDataArgs['epochsToClaimSettlement'];
  withdrawLockupEpochs: ConfigureConfigInstructionDataArgs['withdrawLockupEpochs'];
  minimumStakeLamports: ConfigureConfigInstructionDataArgs['minimumStakeLamports'];
  slotsToStartSettlementClaiming: ConfigureConfigInstructionDataArgs['slotsToStartSettlementClaiming'];
  minBondMaxStakeWanted: ConfigureConfigInstructionDataArgs['minBondMaxStakeWanted'];
};

export function getConfigureConfigInstruction<
  TAccountConfig extends string,
  TAccountAdminAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: ConfigureConfigInput<
    TAccountConfig,
    TAccountAdminAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ConfigureConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountAdminAuthority,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    adminAuthority: { value: input.adminAuthority ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.adminAuthority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getConfigureConfigInstructionDataEncoder().encode(
      args as ConfigureConfigInstructionDataArgs
    ),
    programAddress,
  } as ConfigureConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountAdminAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedConfigureConfigInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    /** only the admin authority can change the config params */
    adminAuthority: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: ConfigureConfigInstructionData;
};

export function parseConfigureConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedConfigureConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      adminAuthority: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getConfigureConfigInstructionDataDecoder().decode(instruction.data),
  };
}
