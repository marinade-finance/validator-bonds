/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const SETTLEMENT_CLAIM_DISCRIMINATOR = new Uint8Array([
  216, 103, 231, 246, 171, 99, 124, 133,
])

export function getSettlementClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SETTLEMENT_CLAIM_DISCRIMINATOR,
  )
}

export type SettlementClaim = {
  discriminator: ReadonlyUint8Array
  /** settlement account this claim belongs under */
  settlement: Address
  /** stake account to which the claim has been withdrawn to */
  stakeAccountTo: Address
  /** staker authority as part of the merkle proof for this claim */
  stakeAccountStaker: Address
  /** withdrawer authority as part of the merkle proof for this claim */
  stakeAccountWithdrawer: Address
  /** claim amount */
  amount: bigint
  /** PDA account bump, one claim per settlement */
  bump: number
  /** rent collector account to get the rent back for claim account creation */
  rentCollector: Address
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export type SettlementClaimArgs = {
  /** settlement account this claim belongs under */
  settlement: Address
  /** stake account to which the claim has been withdrawn to */
  stakeAccountTo: Address
  /** staker authority as part of the merkle proof for this claim */
  stakeAccountStaker: Address
  /** withdrawer authority as part of the merkle proof for this claim */
  stakeAccountWithdrawer: Address
  /** claim amount */
  amount: number | bigint
  /** PDA account bump, one claim per settlement */
  bump: number
  /** rent collector account to get the rent back for claim account creation */
  rentCollector: Address
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export function getSettlementClaimEncoder(): Encoder<SettlementClaimArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settlement', getAddressEncoder()],
      ['stakeAccountTo', getAddressEncoder()],
      ['stakeAccountStaker', getAddressEncoder()],
      ['stakeAccountWithdrawer', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['rentCollector', getAddressEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 93)],
    ]),
    value => ({ ...value, discriminator: SETTLEMENT_CLAIM_DISCRIMINATOR }),
  )
}

export function getSettlementClaimDecoder(): Decoder<SettlementClaim> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settlement', getAddressDecoder()],
    ['stakeAccountTo', getAddressDecoder()],
    ['stakeAccountStaker', getAddressDecoder()],
    ['stakeAccountWithdrawer', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['rentCollector', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 93)],
  ])
}

export function getSettlementClaimCodec(): Codec<
  SettlementClaimArgs,
  SettlementClaim
> {
  return combineCodec(getSettlementClaimEncoder(), getSettlementClaimDecoder())
}

export function decodeSettlementClaim<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SettlementClaim, TAddress>
export function decodeSettlementClaim<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SettlementClaim, TAddress>
export function decodeSettlementClaim<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<SettlementClaim, TAddress>
  | MaybeAccount<SettlementClaim, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSettlementClaimDecoder(),
  )
}

export async function fetchSettlementClaim<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SettlementClaim, TAddress>> {
  const maybeAccount = await fetchMaybeSettlementClaim(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeSettlementClaim<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SettlementClaim, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeSettlementClaim(maybeAccount)
}

export async function fetchAllSettlementClaim(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<SettlementClaim>[]> {
  const maybeAccounts = await fetchAllMaybeSettlementClaim(
    rpc,
    addresses,
    config,
  )
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeSettlementClaim(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SettlementClaim>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeSettlementClaim(maybeAccount))
}

export function getSettlementClaimSize(): number {
  return 270
}
