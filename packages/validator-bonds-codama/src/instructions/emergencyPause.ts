/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EMERGENCY_PAUSE_DISCRIMINATOR = new Uint8Array([
  21, 143, 27, 142, 200, 181, 210, 255,
]);

export function getEmergencyPauseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EMERGENCY_PAUSE_DISCRIMINATOR
  );
}

export type EmergencyPauseInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountPauseAuthority extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPauseAuthority extends string
        ? ReadonlySignerAccount<TAccountPauseAuthority> &
            AccountSignerMeta<TAccountPauseAuthority>
        : TAccountPauseAuthority,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type EmergencyPauseInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type EmergencyPauseInstructionDataArgs = {};

export function getEmergencyPauseInstructionDataEncoder(): FixedSizeEncoder<EmergencyPauseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: EMERGENCY_PAUSE_DISCRIMINATOR })
  );
}

export function getEmergencyPauseInstructionDataDecoder(): FixedSizeDecoder<EmergencyPauseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getEmergencyPauseInstructionDataCodec(): FixedSizeCodec<
  EmergencyPauseInstructionDataArgs,
  EmergencyPauseInstructionData
> {
  return combineCodec(
    getEmergencyPauseInstructionDataEncoder(),
    getEmergencyPauseInstructionDataDecoder()
  );
}

export type EmergencyPauseInput<
  TAccountConfig extends string = string,
  TAccountPauseAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  pauseAuthority: TransactionSigner<TAccountPauseAuthority>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getEmergencyPauseInstruction<
  TAccountConfig extends string,
  TAccountPauseAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: EmergencyPauseInput<
    TAccountConfig,
    TAccountPauseAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): EmergencyPauseInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountPauseAuthority,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    pauseAuthority: { value: input.pauseAuthority ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pauseAuthority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getEmergencyPauseInstructionDataEncoder().encode({}),
    programAddress,
  } as EmergencyPauseInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountPauseAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedEmergencyPauseInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    pauseAuthority: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: EmergencyPauseInstructionData;
};

export function parseEmergencyPauseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEmergencyPauseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      pauseAuthority: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getEmergencyPauseInstructionDataDecoder().decode(instruction.data),
  };
}
