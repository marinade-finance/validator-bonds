agents:
  queue: "snapshots"

env:
  gs_bucket: gs://marinade-validator-bonds-mainnet

steps:
  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/fund-settlements'
    concurrency: 1

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build fund-settlement"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin fund-settlement'
    artifact_paths:
      - target/release/fund-settlement

  - label: " Loading json settlements data"
    env:
      past_epochs_to_load: 3
      # epoch when the contract v2 was deployed, using different structure of merkle tree than v1
      starting_epoch_contract_v2: 640
    commands:
    - |
      set -x
      merkle_trees=$(buildkite-agent artifact search "merkle-trees/*" || echo "")
      if [[ "x$$merkle_trees" != "x" && ! "$$merkle_trees" =~ 'fatal' ]]; then
        echo "Merkle trees already downloaded"
        exit 0
      fi
    - |
      set -x
      current_epoch=$(curl --silent "$$RPC_URL" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getEpochInfo"}' | jq '.result.epoch')
      epochs_start_index=$((current_epoch - past_epochs_to_load))
    - 'mkdir ./merkle-trees/'
    - |
      set -x
      for epoch in $(seq $$epochs_start_index $$current_epoch); do
        if [[ $$epoch -lt $$starting_epoch_contract_v2 ]]; then
          echo "Skipping epoch $$epoch, because it's before the contract v2 deployment epoch $$starting_epoch_contract_v2"
          continue
        fi
        for merkle_tree_file in $(gcloud storage ls "$gs_bucket/$$epoch/*settlement-merkle-trees.json"); do
          base_name=$(basename "$$merkle_tree_file")
          prefix_name="$${base_name%settlement-merkle-trees.json}"
          target_dir="./merkle-trees/$${epoch}_$${prefix_name}/"
          mkdir -p "$$target_dir"
          gcloud storage cp "$gs_bucket/$$epoch/$${prefix_name}settlement-merkle-trees.json" "$$target_dir"
          gcloud storage cp "$gs_bucket/$$epoch/$${prefix_name}settlements.json" "$$target_dir"
        done
      done
    artifact_paths:
      - "./merkle-trees/**/*"

  - label: ":black_nib: Find Discord webhook"
    commands:
    - |
      discord_webhook="$(buildkite-agent meta-data get discord_webhook)"
      if [[ -z "$$discord_webhook" ]]; then
        # env defined by job definition
        discord_webhook="${DISCORD_WEBHOOK}"
      fi
      if [[ -z "$$discord_webhook" ]]; then
        # env defined by buildkite environment
        discord_webhook="$${DISCORD_WEBHOOK_VALIDATOR_BONDS}"
      fi

  - wait: ~

  - label: ":campfire::arrow_right: Fund settlements"
    env:
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,solana_transaction_executor=debug,fund_settlement=debug
    commands:
    - '. "$HOME/.cargo/env"'
    - 'prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))'
    - 'buildkite-agent artifact download --include-retried-jobs fund-execution-report.$$prior_build_number . || true'
    - |
      cp "fund-execution-report.$$prior_build_number" "fund-execution-report.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "fund-execution-report.$$prior_build_number"
      echo "#ATTEMPT $$BUILDKITE_RETRY_COUNT" | tee -a "./fund-execution-report.$$BUILDKITE_RETRY_COUNT"
    - |
      buildkite-agent artifact download --include-retried-jobs "merkle-trees/*" .
      files=""
      set -x
      for dir in ./merkle-trees/*; do
        if [ -d "$$dir" ]; then
          pair_files=""
          for file in "$$dir"/*; do
            pair_files="$$pair_files $$file"
          done
          files="$$files -f $$pair_files"
        fi
      done
    - 'buildkite-agent artifact download --include-retried-jobs target/release/fund-settlement .'
    - 'chmod +x target/release/fund-settlement'
    - |
      set -o pipefail
      ./target/release/fund-settlement \
        --rpc-url $$RPC_URL \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$PSR_TX_FEE_WALLET" \
        --marinade-wallet "$$PSR_MARINADE_DAO_FUNDER_WALLET" \
        --rent-payer "$$PSR_RENT_PAYER_WALLET" \
        $$files | tee -a "./fund-execution-report.$$BUILDKITE_RETRY_COUNT"
    key: 'fund-settlement'
    artifact_paths:
      - "./fund-execution-report.*"
    retry:
      automatic:
        - exit_status: 100
          limit: 5

  - label: ":memo: Notification setup: Fund Settlements"
    commands:
     - 'mkdir ./reports'
     - 'buildkite-agent artifact download --include-retried-jobs "fund-execution-report.*" ./reports/ || echo "No report ERROR" > ./reports/fund-execution-report.error'
     - 'report_path="./reports/$(ls -v1 reports/ | tail -n 1)"'
     - 'cp "$$report_path" ./fund-report.txt'
     - 'buildkite-agent meta-data set attempts_count "$(grep -c ATTEMPT ./fund-report.txt)"'
    artifact_paths:
    - "./fund-report.txt"
    key: 'notification-setup-funding'
    depends_on: "fund-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":mega: Notification Funding"
    commands:
    - build_result=$(buildkite-agent step get "outcome" --step "fund-settlement")
    - |
      if [[ -z "$$build_result" || "$$build_result" =~ "failed" ]]; then
        notification_result="finished with WARNINGS"
        notification_color="16355909"
      else
        notification_result="SUCCEEDED"
        notification_color="52224"
      fi
    - |
      attempts_count=$(buildkite-agent meta-data get attempts_count || echo "UNKNOWN")
      buildkite-agent artifact download --include-retried-jobs fund-report.txt . || echo 'UNKNOWN ERROR' > './fund-report.txt'
      curl "$(buildkite-agent meta-data get discord_webhook)" \
        -F 'payload_json={
            "embeds":[{
              "title": "Fund Settlements '"$$notification_result"', '"$$attempts_count"' attempts",
              "url": "'"$$BUILDKITE_BUILD_URL"'",
              "color": "'"$$notification_color"'"
            }]
        }' \
        -F "file1=@./fund-report.txt"
    depends_on: "notification-setup-funding"
    allow_dependency_failure: true

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/fund-settlements'
    concurrency: 1
