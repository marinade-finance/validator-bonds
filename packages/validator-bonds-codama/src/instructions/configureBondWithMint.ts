/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CONFIGURE_BOND_WITH_MINT_DISCRIMINATOR = new Uint8Array([
  48, 189, 230, 39, 112, 33, 227, 8,
])

export function getConfigureBondWithMintDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIGURE_BOND_WITH_MINT_DISCRIMINATOR,
  )
}

export type ConfigureBondWithMintInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? WritableAccount<TAccountBond>
        : TAccountBond,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountTokenAuthority extends string
        ? ReadonlySignerAccount<TAccountTokenAuthority> &
            IAccountSignerMeta<TAccountTokenAuthority>
        : TAccountTokenAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type ConfigureBondWithMintInstructionData = {
  discriminator: ReadonlyUint8Array
  /** Validator identity configured within the vote account. */
  validatorIdentity: Address
  /** New bond authority that can manage the bond account. */
  bondAuthority: Option<Address>
  /**
   * New `cpmpe` value (cost per mille per epoch).
   * It defines the bid for the validator to get delegated up to `max_stake_wanted` lamports.
   */
  cpmpe: Option<bigint>
  /**
   * new max_stake_wanted value that vote account owner declares
   * as the maximum delegated stake wanted
   */
  maxStakeWanted: Option<bigint>
}

export type ConfigureBondWithMintInstructionDataArgs = {
  /** Validator identity configured within the vote account. */
  validatorIdentity: Address
  /** New bond authority that can manage the bond account. */
  bondAuthority: OptionOrNullable<Address>
  /**
   * New `cpmpe` value (cost per mille per epoch).
   * It defines the bid for the validator to get delegated up to `max_stake_wanted` lamports.
   */
  cpmpe: OptionOrNullable<number | bigint>
  /**
   * new max_stake_wanted value that vote account owner declares
   * as the maximum delegated stake wanted
   */
  maxStakeWanted: OptionOrNullable<number | bigint>
}

export function getConfigureBondWithMintInstructionDataEncoder(): Encoder<ConfigureBondWithMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorIdentity', getAddressEncoder()],
      ['bondAuthority', getOptionEncoder(getAddressEncoder())],
      ['cpmpe', getOptionEncoder(getU64Encoder())],
      ['maxStakeWanted', getOptionEncoder(getU64Encoder())],
    ]),
    value => ({
      ...value,
      discriminator: CONFIGURE_BOND_WITH_MINT_DISCRIMINATOR,
    }),
  )
}

export function getConfigureBondWithMintInstructionDataDecoder(): Decoder<ConfigureBondWithMintInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorIdentity', getAddressDecoder()],
    ['bondAuthority', getOptionDecoder(getAddressDecoder())],
    ['cpmpe', getOptionDecoder(getU64Decoder())],
    ['maxStakeWanted', getOptionDecoder(getU64Decoder())],
  ])
}

export function getConfigureBondWithMintInstructionDataCodec(): Codec<
  ConfigureBondWithMintInstructionDataArgs,
  ConfigureBondWithMintInstructionData
> {
  return combineCodec(
    getConfigureBondWithMintInstructionDataEncoder(),
    getConfigureBondWithMintInstructionDataDecoder(),
  )
}

export type ConfigureBondWithMintInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountMint extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountTokenAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  mint: Address<TAccountMint>
  voteAccount: Address<TAccountVoteAccount>
  /** token account to burn bond mint configuration tokens from */
  tokenAccount: Address<TAccountTokenAccount>
  tokenAuthority: TransactionSigner<TAccountTokenAuthority>
  tokenProgram?: Address<TAccountTokenProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  validatorIdentity: ConfigureBondWithMintInstructionDataArgs['validatorIdentity']
  bondAuthority: ConfigureBondWithMintInstructionDataArgs['bondAuthority']
  cpmpe: ConfigureBondWithMintInstructionDataArgs['cpmpe']
  maxStakeWanted: ConfigureBondWithMintInstructionDataArgs['maxStakeWanted']
}

export function getConfigureBondWithMintInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountMint extends string,
  TAccountVoteAccount extends string,
  TAccountTokenAccount extends string,
  TAccountTokenAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: ConfigureBondWithMintInput<
    TAccountConfig,
    TAccountBond,
    TAccountMint,
    TAccountVoteAccount,
    TAccountTokenAccount,
    TAccountTokenAuthority,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ConfigureBondWithMintInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountMint,
  TAccountVoteAccount,
  TAccountTokenAccount,
  TAccountTokenAuthority,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    tokenAuthority: { value: input.tokenAuthority ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.tokenAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getConfigureBondWithMintInstructionDataEncoder().encode(
      args as ConfigureBondWithMintInstructionDataArgs,
    ),
  } as ConfigureBondWithMintInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountMint,
    TAccountVoteAccount,
    TAccountTokenAccount,
    TAccountTokenAuthority,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedConfigureBondWithMintInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    mint: TAccountMetas[2]
    voteAccount: TAccountMetas[3]
    /** token account to burn bond mint configuration tokens from */
    tokenAccount: TAccountMetas[4]
    tokenAuthority: TAccountMetas[5]
    tokenProgram: TAccountMetas[6]
    eventAuthority: TAccountMetas[7]
    program: TAccountMetas[8]
  }
  data: ConfigureBondWithMintInstructionData
}

export function parseConfigureBondWithMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedConfigureBondWithMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      mint: getNextAccount(),
      voteAccount: getNextAccount(),
      tokenAccount: getNextAccount(),
      tokenAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getConfigureBondWithMintInstructionDataDecoder().decode(
      instruction.data,
    ),
  }
}
