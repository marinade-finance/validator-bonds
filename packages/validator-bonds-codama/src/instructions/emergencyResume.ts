/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const EMERGENCY_RESUME_DISCRIMINATOR = new Uint8Array([
  0, 243, 48, 185, 6, 73, 190, 83,
])

export function getEmergencyResumeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EMERGENCY_RESUME_DISCRIMINATOR,
  )
}

export type EmergencyResumeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPauseAuthority extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPauseAuthority extends string
        ? ReadonlySignerAccount<TAccountPauseAuthority> &
            IAccountSignerMeta<TAccountPauseAuthority>
        : TAccountPauseAuthority,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type EmergencyResumeInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type EmergencyResumeInstructionDataArgs = {}

export function getEmergencyResumeInstructionDataEncoder(): Encoder<EmergencyResumeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({ ...value, discriminator: EMERGENCY_RESUME_DISCRIMINATOR }),
  )
}

export function getEmergencyResumeInstructionDataDecoder(): Decoder<EmergencyResumeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getEmergencyResumeInstructionDataCodec(): Codec<
  EmergencyResumeInstructionDataArgs,
  EmergencyResumeInstructionData
> {
  return combineCodec(
    getEmergencyResumeInstructionDataEncoder(),
    getEmergencyResumeInstructionDataDecoder(),
  )
}

export type EmergencyResumeInput<
  TAccountConfig extends string = string,
  TAccountPauseAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  pauseAuthority: TransactionSigner<TAccountPauseAuthority>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getEmergencyResumeInstruction<
  TAccountConfig extends string,
  TAccountPauseAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: EmergencyResumeInput<
    TAccountConfig,
    TAccountPauseAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): EmergencyResumeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountPauseAuthority,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    pauseAuthority: { value: input.pauseAuthority ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pauseAuthority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getEmergencyResumeInstructionDataEncoder().encode({}),
  } as EmergencyResumeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountPauseAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedEmergencyResumeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    pauseAuthority: TAccountMetas[1]
    eventAuthority: TAccountMetas[2]
    program: TAccountMetas[3]
  }
  data: EmergencyResumeInstructionData
}

export function parseEmergencyResumeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedEmergencyResumeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      pauseAuthority: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getEmergencyResumeInstructionDataDecoder().decode(instruction.data),
  }
}
