agents:
  queue: "snapshots"

env:
  gs_bucket: gs://marinade-validator-bonds-mainnet
  claim_type: "protected-events"
  ds_sam_auction_github_api_link: "https://api.github.com/repos/marinade-finance/ds-sam-pipeline/contents/auctions/"
  ds_sam_auction_download_link: "https://raw.githubusercontent.com/marinade-finance/ds-sam-pipeline/main/auctions/"

steps:
  - label: ":hammer_and_wrench: :rust: Build"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin protected-event-distribution-cli'
    artifact_paths:
      - target/release/protected-event-distribution-cli

  - input: "What is the epoch to generate settlements for?"
    fields:
      - text: "Epoch"
        key: "epoch"
        format: "[0-9]+"
    if: "build.env('EPOCH') == null"
  - command: "echo 'Epoch is: $EPOCH'"
    if: "build.env('EPOCH') != null"

  - wait: ~

  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/prepare-protected-events'
    concurrency: 1

  - wait: ~

  - label: ":cloud: :arrow_right: :floppy_disk: Downloading Settlements JSON data"
    commands:
    - |
      epoch=${EPOCH:-$(buildkite-agent meta-data get epoch)}
      buildkite-agent meta-data set epoch "$$epoch"
    - |
      gcloud storage cp "$gs_bucket/$$epoch/validators.json" "."
      gcloud storage cp "$gs_bucket/$$epoch/stakes.json" "."
      gcloud storage cp "$gs_bucket/$$epoch/past-validators.json" "." || echo "Previous validator data not available!"
    artifact_paths:
      - "./*.json"

  - label: ":cloud: :arrow_right: :floppy_disk: Downloading DS SAM auction data"
    commands:
      - 'epoch=${EPOCH:-$(buildkite-agent meta-data get epoch)}'
      # checking auction directory to work with
      - |
        epoch_auction_dirs=$(./scripts/gh_curl.bash "$$ds_sam_auction_github_api_link" |\
          jq -r '.[] | .name' | grep "$${epoch}\.")
        # epoch_auction_dirs list of dirs in format '<epoch>.<slot>', for example '653.12308'
        epoch_auction_dir=$(echo "$$epoch_auction_dirs" | sort -t. -k2 -n -r | head -n 1)
        if [[ -z "$$epoch_auction_dir" ]]; then
          echo "No auction data found for epoch $$epoch, directory listing: $$auction_dirs"
          exit 1
        fi
      # listing input and output files
      - |
        ds_sam_input_listing_link="$${ds_sam_auction_github_api_link}$${epoch_auction_dir}/inputs/"
        input_dir_files=$(./scripts/gh_curl.bash "$$ds_sam_input_listing_link" |\
          jq -r '.[] | .name')
        ds_sam_output_listing_link="$${ds_sam_auction_github_api_link}$${epoch_auction_dir}/outputs/"
        output_dir_files=$(./scripts/gh_curl.bash "$$ds_sam_output_listing_link" |\
          jq -r '.[] | .name' | grep '.json')
      # downloading files
      - |       
        mkdir -p ./inputs
        for file in $$input_dir_files; do
          curl -O --output-dir './inputs' "$${ds_sam_auction_download_link}$${epoch_auction_dir}/inputs/$${file}"
        done
        mkdir -p ./outputs
        for file in $$output_dir_files; do
          curl -O --output-dir './outputs' "$${ds_sam_auction_download_link}$${epoch_auction_dir}/outputs/$${file}"
        done
    artifact_paths:
      - "./inputs/*"
      - "./outputs/*"

  - wait: ~

  - label: ":campfire: DS SAM generates PMPE bids data"
    commands:
      - 'buildkite-agent artifact download --include-retried-jobs validators.json .'
      - 'buildkite-agent artifact download --include-retried-jobs past-validators.json . || echo "Previous validator data not available"'
      - 'buildkite-agent artifact download --include-retried-jobs inputs/* .'
      - 'buildkite-agent artifact download --include-retried-jobs outputs/* .'
      - '[[ ! -f "./outputs/results.json" ]] && echo "results.json not found" && exit 2'
      - 'past_validators_arg=$( [[ -f ./past-validators.json ]] && echo "--snapshot-past-validators-file-path ../past-validators.json" || echo "" )'
      - 'git clone git@github.com:marinade-finance/ds-sam.git'
      - |
        cd ds-sam
        git status
        pnpm install
        pnpm -r build
      - |
        pnpm run cli -- analyze-revenues \
          $$past_validators_arg \
          --cache-dir-path "../inputs" \
          --sam-results-fixture-file-path "../outputs/results.json" \
          --snapshot-validators-file-path "../validators.json" \
          --results-file-path "../evaluation.json"
    artifact_paths:
      - "./evaluation.json"

  - wait: ~

  - label: ":scales: Evaluate Marinade Protected Events"
    env:
      RUST_LOG: info,protected_event_distribution=debug
      WHITELIST_STAKE_AUTHORITY: stWirqFCf2Uts1JBL1Jsd3r6VBWhgnpdPxCTe1MFjrq,4bZ6o3eUUNXhKuqjdCnCoPAoLgWiuLYixKaxoa8PpiKk,ex9CfkBZZd6Nv9XdnoDmmB45ymbu4arXVk7g5pWnt3N
    commands:
    - 'buildkite-agent artifact download --include-retried-jobs validators.json .'
    - 'buildkite-agent artifact download --include-retried-jobs stakes.json .'
    - 'buildkite-agent artifact download --include-retried-jobs evaluation.json .'
    - 'buildkite-agent artifact download --include-retried-jobs target/release/protected-event-distribution-cli .'
    - 'chmod +x target/release/protected-event-distribution-cli'
    - |
      ./target/release/protected-event-distribution-cli \
        --settlement-config settlement-config.yaml \
        --validator-meta-collection "./validators.json" \
        --stake-meta-collection "./stakes.json" \
        --revenue-expectation-collection "./evaluation.json" \
        --output-protected-event-collection "./${claim_type}.json" \
        --output-settlement-collection "./${claim_type}-settlements.json" \
        --output-merkle-tree-collection "./${claim_type}-settlement-merkle-trees.json"
    artifact_paths:
        - "./${claim_type}*.json"

  - wait: ~

  - label: "ðŸ““ Generating report"
    commands:
    - 'buildkite-agent artifact download --include-retried-jobs ${claim_type}-settlements.json .'
    - './scripts/generate-discord-public-report.bash "./${claim_type}-settlements.json" "Protected Events" > "./discord-public-report.txt"'
    artifact_paths:
      - "./discord-public-report.txt"

  - wait: ~

  - label: ":floppy_disk: :arrow_right: :cloud: Upload artifacts"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - buildkite-agent artifact download --include-retried-jobs ${claim_type}.json .
    - buildkite-agent artifact download --include-retried-jobs ${claim_type}-settlements.json .
    - buildkite-agent artifact download --include-retried-jobs ${claim_type}-settlement-merkle-trees.json .
    - buildkite-agent artifact download --include-retried-jobs discord-public-report.txt .
    - buildkite-agent artifact download --include-retried-jobs evaluation.json .
    - gcloud storage cp "./${claim_type}.json" "$gs_bucket/$$epoch/"
    - gcloud storage cp "./${claim_type}-settlements.json" "$gs_bucket/$$epoch/"
    - gcloud storage cp "./${claim_type}-settlement-merkle-trees.json" "$gs_bucket/$$epoch/"
    - gcloud storage cp "./discord-public-report.txt" "$gs_bucket/$$epoch/${claim_type}-discord-public-report.txt"
    - gcloud storage cp "./evaluation.json" "$gs_bucket/$$epoch/${claim_type}-evaluation.json"

  - wait: ~

  - label: ":mega: Notification"
    commands:
    - |
      epoch=$(buildkite-agent meta-data get epoch)
      curl "$$DISCORD_WEBHOOK_VALIDATOR_BONDS" -H "Content-Type: application/json" -d '{
        "embeds": [
          {
            "title": "Claims for Validator Bonds ('"${claim_type}"') generated ('"$$epoch"').",
            "url": "'"$$BUILDKITE_BUILD_URL"'",
            "color": "52224"
          }
        ]
      }'

  - label: ":mega: PSR feed"
    commands:
    - buildkite-agent artifact download --include-retried-jobs discord-public-report.txt .
    - epoch=$(buildkite-agent meta-data get epoch)
    - |
      split_command=$(which split >&2 > /dev/null && echo "split" || echo "gsplit")
      # discord max message length is 2000 characters
      $$split_command -C 2000 "./discord-public-report.txt" './discord-public-report.txt.chunk-'
      for report_chunk in './discord-public-report.txt.chunk-'*; do
        report=$(cat "$$report_chunk")
        curl "$$DISCORD_WEBHOOK_PSR_FEED" -H "Content-Type: application/json" -d "$(jq -n --arg report "$$report" '{"content": ("```\n"+$$report+"```"), "embeds": null, "attachments": []}')"
      done

  - wait: ~

  - label: ":gear: Setup init-settlements trigger"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - |
      cat <<EOF | buildkite-agent pipeline upload
      steps:
        - trigger: "init-settlements"
          label: ":rocket: Trigger: Init settlements ($$epoch)/($claim_type)"
          async: true
          build:
            branch: $$BUILDKITE_BRANCH
            env:
              EPOCH: $$epoch
              CLAIM_TYPE: $claim_type
              gs_bucket: $gs_bucket
      EOF

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/prepare-protected-events'
    concurrency: 1
