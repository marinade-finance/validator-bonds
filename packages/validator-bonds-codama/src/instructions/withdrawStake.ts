/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const WITHDRAW_STAKE_DISCRIMINATOR = new Uint8Array([
  153, 8, 22, 138, 105, 176, 87, 66,
])

export function getWithdrawStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_STAKE_DISCRIMINATOR,
  )
}

export type WithdrawStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountOperatorAuthority extends string | IAccountMeta<string> = string,
  TAccountSettlement extends string | IAccountMeta<string> = string,
  TAccountStakeAccount extends string | IAccountMeta<string> = string,
  TAccountBondsWithdrawerAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountWithdrawTo extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountOperatorAuthority extends string
        ? ReadonlySignerAccount<TAccountOperatorAuthority> &
            IAccountSignerMeta<TAccountOperatorAuthority>
        : TAccountOperatorAuthority,
      TAccountSettlement extends string
        ? ReadonlyAccount<TAccountSettlement>
        : TAccountSettlement,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountBondsWithdrawerAuthority extends string
        ? ReadonlyAccount<TAccountBondsWithdrawerAuthority>
        : TAccountBondsWithdrawerAuthority,
      TAccountWithdrawTo extends string
        ? WritableAccount<TAccountWithdrawTo>
        : TAccountWithdrawTo,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type WithdrawStakeInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type WithdrawStakeInstructionDataArgs = {}

export function getWithdrawStakeInstructionDataEncoder(): Encoder<WithdrawStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({ ...value, discriminator: WITHDRAW_STAKE_DISCRIMINATOR }),
  )
}

export function getWithdrawStakeInstructionDataDecoder(): Decoder<WithdrawStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getWithdrawStakeInstructionDataCodec(): Codec<
  WithdrawStakeInstructionDataArgs,
  WithdrawStakeInstructionData
> {
  return combineCodec(
    getWithdrawStakeInstructionDataEncoder(),
    getWithdrawStakeInstructionDataDecoder(),
  )
}

export type WithdrawStakeInput<
  TAccountConfig extends string = string,
  TAccountOperatorAuthority extends string = string,
  TAccountSettlement extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountBondsWithdrawerAuthority extends string = string,
  TAccountWithdrawTo extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountClock extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** the config account under which the bond was created */
  config: Address<TAccountConfig>
  /** operator authority is allowed to reset the non-delegated stake accounts */
  operatorAuthority: TransactionSigner<TAccountOperatorAuthority>
  /** cannot exist; used to derive settlement authority */
  settlement: Address<TAccountSettlement>
  /** stake account where staker authority is derived from settlement */
  stakeAccount: Address<TAccountStakeAccount>
  /** bonds authority to withdraw the stake account */
  bondsWithdrawerAuthority: Address<TAccountBondsWithdrawerAuthority>
  withdrawTo: Address<TAccountWithdrawTo>
  stakeHistory: Address<TAccountStakeHistory>
  clock: Address<TAccountClock>
  stakeProgram: Address<TAccountStakeProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getWithdrawStakeInstruction<
  TAccountConfig extends string,
  TAccountOperatorAuthority extends string,
  TAccountSettlement extends string,
  TAccountStakeAccount extends string,
  TAccountBondsWithdrawerAuthority extends string,
  TAccountWithdrawTo extends string,
  TAccountStakeHistory extends string,
  TAccountClock extends string,
  TAccountStakeProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: WithdrawStakeInput<
    TAccountConfig,
    TAccountOperatorAuthority,
    TAccountSettlement,
    TAccountStakeAccount,
    TAccountBondsWithdrawerAuthority,
    TAccountWithdrawTo,
    TAccountStakeHistory,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawStakeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountOperatorAuthority,
  TAccountSettlement,
  TAccountStakeAccount,
  TAccountBondsWithdrawerAuthority,
  TAccountWithdrawTo,
  TAccountStakeHistory,
  TAccountClock,
  TAccountStakeProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    operatorAuthority: {
      value: input.operatorAuthority ?? null,
      isWritable: false,
    },
    settlement: { value: input.settlement ?? null, isWritable: false },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    bondsWithdrawerAuthority: {
      value: input.bondsWithdrawerAuthority ?? null,
      isWritable: false,
    },
    withdrawTo: { value: input.withdrawTo ?? null, isWritable: true },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.operatorAuthority),
      getAccountMeta(accounts.settlement),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.bondsWithdrawerAuthority),
      getAccountMeta(accounts.withdrawTo),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getWithdrawStakeInstructionDataEncoder().encode({}),
  } as WithdrawStakeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountOperatorAuthority,
    TAccountSettlement,
    TAccountStakeAccount,
    TAccountBondsWithdrawerAuthority,
    TAccountWithdrawTo,
    TAccountStakeHistory,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedWithdrawStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    /** the config account under which the bond was created */
    config: TAccountMetas[0]
    /** operator authority is allowed to reset the non-delegated stake accounts */
    operatorAuthority: TAccountMetas[1]
    /** cannot exist; used to derive settlement authority */
    settlement: TAccountMetas[2]
    /** stake account where staker authority is derived from settlement */
    stakeAccount: TAccountMetas[3]
    /** bonds authority to withdraw the stake account */
    bondsWithdrawerAuthority: TAccountMetas[4]
    withdrawTo: TAccountMetas[5]
    stakeHistory: TAccountMetas[6]
    clock: TAccountMetas[7]
    stakeProgram: TAccountMetas[8]
    eventAuthority: TAccountMetas[9]
    program: TAccountMetas[10]
  }
  data: WithdrawStakeInstructionData
}

export function parseWithdrawStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedWithdrawStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      operatorAuthority: getNextAccount(),
      settlement: getNextAccount(),
      stakeAccount: getNextAccount(),
      bondsWithdrawerAuthority: getNextAccount(),
      withdrawTo: getNextAccount(),
      stakeHistory: getNextAccount(),
      clock: getNextAccount(),
      stakeProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getWithdrawStakeInstructionDataDecoder().decode(instruction.data),
  }
}
