/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CONFIGURE_BOND_DISCRIMINATOR = new Uint8Array([
  228, 108, 79, 242, 82, 54, 105, 65,
])

export function getConfigureBondDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIGURE_BOND_DISCRIMINATOR,
  )
}

export type ConfigureBondInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? WritableAccount<TAccountBond>
        : TAccountBond,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type ConfigureBondInstructionData = {
  discriminator: ReadonlyUint8Array
  /** New bond authority that can manage the bond account. */
  bondAuthority: Option<Address>
  /**
   * New `cpmpe` value (cost per mille per epoch).
   * It defines the bid for the validator to get delegated up to `max_stake_wanted` lamports.
   */
  cpmpe: Option<bigint>
  /**
   * New `max_stake_wanted` value that the vote account owner declares
   * as the maximum delegated stake desired.
   */
  maxStakeWanted: Option<bigint>
}

export type ConfigureBondInstructionDataArgs = {
  /** New bond authority that can manage the bond account. */
  bondAuthority: OptionOrNullable<Address>
  /**
   * New `cpmpe` value (cost per mille per epoch).
   * It defines the bid for the validator to get delegated up to `max_stake_wanted` lamports.
   */
  cpmpe: OptionOrNullable<number | bigint>
  /**
   * New `max_stake_wanted` value that the vote account owner declares
   * as the maximum delegated stake desired.
   */
  maxStakeWanted: OptionOrNullable<number | bigint>
}

export function getConfigureBondInstructionDataEncoder(): Encoder<ConfigureBondInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bondAuthority', getOptionEncoder(getAddressEncoder())],
      ['cpmpe', getOptionEncoder(getU64Encoder())],
      ['maxStakeWanted', getOptionEncoder(getU64Encoder())],
    ]),
    value => ({ ...value, discriminator: CONFIGURE_BOND_DISCRIMINATOR }),
  )
}

export function getConfigureBondInstructionDataDecoder(): Decoder<ConfigureBondInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bondAuthority', getOptionDecoder(getAddressDecoder())],
    ['cpmpe', getOptionDecoder(getU64Decoder())],
    ['maxStakeWanted', getOptionDecoder(getU64Decoder())],
  ])
}

export function getConfigureBondInstructionDataCodec(): Codec<
  ConfigureBondInstructionDataArgs,
  ConfigureBondInstructionData
> {
  return combineCodec(
    getConfigureBondInstructionDataEncoder(),
    getConfigureBondInstructionDataDecoder(),
  )
}

export type ConfigureBondInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountAuthority extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  /** validator vote account validator identity or bond authority may change the account */
  authority: TransactionSigner<TAccountAuthority>
  voteAccount: Address<TAccountVoteAccount>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  bondAuthority: ConfigureBondInstructionDataArgs['bondAuthority']
  cpmpe: ConfigureBondInstructionDataArgs['cpmpe']
  maxStakeWanted: ConfigureBondInstructionDataArgs['maxStakeWanted']
}

export function getConfigureBondInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountAuthority extends string,
  TAccountVoteAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: ConfigureBondInput<
    TAccountConfig,
    TAccountBond,
    TAccountAuthority,
    TAccountVoteAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ConfigureBondInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountAuthority,
  TAccountVoteAccount,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getConfigureBondInstructionDataEncoder().encode(
      args as ConfigureBondInstructionDataArgs,
    ),
  } as ConfigureBondInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountAuthority,
    TAccountVoteAccount,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedConfigureBondInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    /** validator vote account validator identity or bond authority may change the account */
    authority: TAccountMetas[2]
    voteAccount: TAccountMetas[3]
    eventAuthority: TAccountMetas[4]
    program: TAccountMetas[5]
  }
  data: ConfigureBondInstructionData
}

export function parseConfigureBondInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedConfigureBondInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      authority: getNextAccount(),
      voteAccount: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getConfigureBondInstructionDataDecoder().decode(instruction.data),
  }
}
