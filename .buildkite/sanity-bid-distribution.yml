agents:
  queue: "snapshots"
env:
  gs_bucket_bonds: gs://marinade-validator-bonds-mainnet
  past_epochs_to_check: 10
  PIPELINES_AUTO_APPROVAL: "false" # set to $PIPELINES_AUTO_APPROVAL when verified to be stable

steps:
  - label: ":black_nib: Env variables setup: Sanity Bid"
    commands:
    - |
      epoch=${EPOCH:-$(buildkite-agent meta-data get epoch || echo "")}
      if [[ -n "$$epoch" ]]; then
        buildkite-agent meta-data set --redacted-vars='' epoch "$$epoch"
      else
        echo "Epoch is not set, please set EPOCH env variable or define that within the outer pipeline first"
        exit 1
      fi

  - wait: ~

  - label: ":broom: :one: Sanity Check - Merkle Tree & Settlement"
    key: "sanity-check-1"
    commands:
      - buildkite-agent artifact download --include-retried-jobs settlements.json .
      - buildkite-agent artifact download --include-retried-jobs settlement-merkle-trees.json .
      - |
        pnpm install
        pnpm -r build
      - |
        pnpm cli:check check-settlement \
          -s ./settlements.json \
          -m ./settlement-merkle-trees.json
    soft_fail:
      - exit_status: "*"

  - label: ":floppy_disk: :arrow_left: :cloud: Downloading past Settlements"
    commands:
    - epoch=$(buildkite-agent meta-data get epoch)
    - claim_type=$(buildkite-agent meta-data get claim_type)
    - |
      past_epochs_dir="./past-epochs"
      mkdir -p "$$past_epochs_dir"
      for past_epoch in $$(seq $$((epoch - past_epochs_to_check)) $$((epoch - 1))); do
        gcloud storage cp "$gs_bucket_bonds/$${past_epoch}/$${claim_type}-settlements.json" "$$past_epochs_dir/$${past_epoch}-$${claim_type}-settlements.json"
      done
    artifact_paths:
      - "./past-epochs/*.json"

  - wait: ~

  - label: ":broom: :two: Sanity Check - Previous Data"
    key: "sanity-check-2"
    commands:
      - epoch=$(buildkite-agent meta-data get epoch)
      - buildkite-agent artifact download --include-retried-jobs settlements.json .
      - buildkite-agent artifact download --include-retried-jobs past-epochs/*.json .
      - |
        pnpm install
        pnpm -r build
      - |
        pnpm cli:check check \
          --current ./settlements.json \
          --past ./past-epochs/*.json \
          --correlation-threshold 0.15 \
          --score-threshold 2.0 \
          --type bid
    soft_fail:
      - exit_status: "*"

  - wait: ~

  - label: ":printer: Block processing when sanity check fails"
    command : |
      outcome1=$$(buildkite-agent step get "outcome" --step "sanity-check-1")
      outcome2=$$(buildkite-agent step get "outcome" --step "sanity-check-2")

      if [[ "$$outcome1 $$outcome2" =~ soft_failed ]]; then
         cat <<- YAML | buildkite-agent pipeline upload
         steps:
           - block: ":interrobang: Sanity check failed"
             prompt: "Sanity check(s) failed. Review and select 'Unblock' if ready to proceed."
             if: build.env('PIPELINES_AUTO_APPROVAL') == 'true'
             blocked_state: running
      YAML
      fi
    depends_on: 
      - "sanity-check-1"
      - "sanity-check-2"

  - block: ":interrobang: Confirm to get processed bid distribution"
    prompt: "[PIPELINES_AUTO_APPROVAL=${PIPELINES_AUTO_APPROVAL}] Review data + sanity check and 'Unblock' if ready to proceed."
    if: build.env('PIPELINES_AUTO_APPROVAL') != 'true'
    blocked_state: running
