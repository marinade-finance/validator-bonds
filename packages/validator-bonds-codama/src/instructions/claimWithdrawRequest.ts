/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CLAIM_WITHDRAW_REQUEST_DISCRIMINATOR = new Uint8Array([
  48, 232, 23, 52, 20, 134, 122, 118,
])

export function getClaimWithdrawRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_WITHDRAW_REQUEST_DISCRIMINATOR,
  )
}

export type ClaimWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountBondsWithdrawerAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakeAccount extends string | IAccountMeta<string> = string,
  TAccountWithdrawer extends string | IAccountMeta<string> = string,
  TAccountSplitStakeAccount extends string | IAccountMeta<string> = string,
  TAccountSplitStakeRentPayer extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountWithdrawRequest extends string
        ? WritableAccount<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountBondsWithdrawerAuthority extends string
        ? ReadonlyAccount<TAccountBondsWithdrawerAuthority>
        : TAccountBondsWithdrawerAuthority,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountWithdrawer extends string
        ? ReadonlyAccount<TAccountWithdrawer>
        : TAccountWithdrawer,
      TAccountSplitStakeAccount extends string
        ? WritableSignerAccount<TAccountSplitStakeAccount> &
            IAccountSignerMeta<TAccountSplitStakeAccount>
        : TAccountSplitStakeAccount,
      TAccountSplitStakeRentPayer extends string
        ? WritableSignerAccount<TAccountSplitStakeRentPayer> &
            IAccountSignerMeta<TAccountSplitStakeRentPayer>
        : TAccountSplitStakeRentPayer,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type ClaimWithdrawRequestInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type ClaimWithdrawRequestInstructionDataArgs = {}

export function getClaimWithdrawRequestInstructionDataEncoder(): Encoder<ClaimWithdrawRequestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({
      ...value,
      discriminator: CLAIM_WITHDRAW_REQUEST_DISCRIMINATOR,
    }),
  )
}

export function getClaimWithdrawRequestInstructionDataDecoder(): Decoder<ClaimWithdrawRequestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getClaimWithdrawRequestInstructionDataCodec(): Codec<
  ClaimWithdrawRequestInstructionDataArgs,
  ClaimWithdrawRequestInstructionData
> {
  return combineCodec(
    getClaimWithdrawRequestInstructionDataEncoder(),
    getClaimWithdrawRequestInstructionDataDecoder(),
  )
}

export type ClaimWithdrawRequestInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountBondsWithdrawerAuthority extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountWithdrawer extends string = string,
  TAccountSplitStakeAccount extends string = string,
  TAccountSplitStakeRentPayer extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountClock extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** the config root configuration account */
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  voteAccount: Address<TAccountVoteAccount>
  /** validator vote account node identity or bond authority may claim */
  authority: TransactionSigner<TAccountAuthority>
  withdrawRequest: Address<TAccountWithdrawRequest>
  bondsWithdrawerAuthority: Address<TAccountBondsWithdrawerAuthority>
  /**
   * stake account to be used to withdraw the funds
   * this stake account has to be delegated to the validator vote account associated to the bond
   */
  stakeAccount: Address<TAccountStakeAccount>
  /** New owner of the stake account, it will be accounted to the withdrawer authority */
  withdrawer: Address<TAccountWithdrawer>
  /**
   * this is a whatever address that does not exist
   * when withdrawing needs to split the provided account this will be used as a new stake account
   */
  splitStakeAccount: TransactionSigner<TAccountSplitStakeAccount>
  /**
   * when the split_stake_account is created the rent for creation is taken from here
   * when the split_stake_account is not created then no rent is paid
   */
  splitStakeRentPayer: TransactionSigner<TAccountSplitStakeRentPayer>
  stakeProgram: Address<TAccountStakeProgram>
  systemProgram?: Address<TAccountSystemProgram>
  stakeHistory: Address<TAccountStakeHistory>
  clock: Address<TAccountClock>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getClaimWithdrawRequestInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountVoteAccount extends string,
  TAccountAuthority extends string,
  TAccountWithdrawRequest extends string,
  TAccountBondsWithdrawerAuthority extends string,
  TAccountStakeAccount extends string,
  TAccountWithdrawer extends string,
  TAccountSplitStakeAccount extends string,
  TAccountSplitStakeRentPayer extends string,
  TAccountStakeProgram extends string,
  TAccountSystemProgram extends string,
  TAccountStakeHistory extends string,
  TAccountClock extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: ClaimWithdrawRequestInput<
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountBondsWithdrawerAuthority,
    TAccountStakeAccount,
    TAccountWithdrawer,
    TAccountSplitStakeAccount,
    TAccountSplitStakeRentPayer,
    TAccountStakeProgram,
    TAccountSystemProgram,
    TAccountStakeHistory,
    TAccountClock,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimWithdrawRequestInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountVoteAccount,
  TAccountAuthority,
  TAccountWithdrawRequest,
  TAccountBondsWithdrawerAuthority,
  TAccountStakeAccount,
  TAccountWithdrawer,
  TAccountSplitStakeAccount,
  TAccountSplitStakeRentPayer,
  TAccountStakeProgram,
  TAccountSystemProgram,
  TAccountStakeHistory,
  TAccountClock,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    bondsWithdrawerAuthority: {
      value: input.bondsWithdrawerAuthority ?? null,
      isWritable: false,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    withdrawer: { value: input.withdrawer ?? null, isWritable: false },
    splitStakeAccount: {
      value: input.splitStakeAccount ?? null,
      isWritable: true,
    },
    splitStakeRentPayer: {
      value: input.splitStakeRentPayer ?? null,
      isWritable: true,
    },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.bondsWithdrawerAuthority),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.withdrawer),
      getAccountMeta(accounts.splitStakeAccount),
      getAccountMeta(accounts.splitStakeRentPayer),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimWithdrawRequestInstructionDataEncoder().encode({}),
  } as ClaimWithdrawRequestInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountBondsWithdrawerAuthority,
    TAccountStakeAccount,
    TAccountWithdrawer,
    TAccountSplitStakeAccount,
    TAccountSplitStakeRentPayer,
    TAccountStakeProgram,
    TAccountSystemProgram,
    TAccountStakeHistory,
    TAccountClock,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedClaimWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    /** the config root configuration account */
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    voteAccount: TAccountMetas[2]
    /** validator vote account node identity or bond authority may claim */
    authority: TAccountMetas[3]
    withdrawRequest: TAccountMetas[4]
    bondsWithdrawerAuthority: TAccountMetas[5]
    /**
     * stake account to be used to withdraw the funds
     * this stake account has to be delegated to the validator vote account associated to the bond
     */

    stakeAccount: TAccountMetas[6]
    /** New owner of the stake account, it will be accounted to the withdrawer authority */
    withdrawer: TAccountMetas[7]
    /**
     * this is a whatever address that does not exist
     * when withdrawing needs to split the provided account this will be used as a new stake account
     */

    splitStakeAccount: TAccountMetas[8]
    /**
     * when the split_stake_account is created the rent for creation is taken from here
     * when the split_stake_account is not created then no rent is paid
     */

    splitStakeRentPayer: TAccountMetas[9]
    stakeProgram: TAccountMetas[10]
    systemProgram: TAccountMetas[11]
    stakeHistory: TAccountMetas[12]
    clock: TAccountMetas[13]
    eventAuthority: TAccountMetas[14]
    program: TAccountMetas[15]
  }
  data: ClaimWithdrawRequestInstructionData
}

export function parseClaimWithdrawRequestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedClaimWithdrawRequestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      voteAccount: getNextAccount(),
      authority: getNextAccount(),
      withdrawRequest: getNextAccount(),
      bondsWithdrawerAuthority: getNextAccount(),
      stakeAccount: getNextAccount(),
      withdrawer: getNextAccount(),
      splitStakeAccount: getNextAccount(),
      splitStakeRentPayer: getNextAccount(),
      stakeProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeHistory: getNextAccount(),
      clock: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimWithdrawRequestInstructionDataDecoder().decode(
      instruction.data,
    ),
  }
}
