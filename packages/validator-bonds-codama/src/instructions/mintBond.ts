/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_BOND_DISCRIMINATOR = new Uint8Array([
  234, 94, 85, 225, 167, 102, 169, 32,
]);

export function getMintBondDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_BOND_DISCRIMINATOR);
}

export type MintBondInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountBond extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountValidatorIdentity extends string | AccountMeta<string> = string,
  TAccountValidatorIdentityTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | AccountMeta<string> = string,
  TAccountMetadataProgram extends string | AccountMeta<string> = string,
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountValidatorIdentity extends string
        ? ReadonlyAccount<TAccountValidatorIdentity>
        : TAccountValidatorIdentity,
      TAccountValidatorIdentityTokenAccount extends string
        ? WritableAccount<TAccountValidatorIdentityTokenAccount>
        : TAccountValidatorIdentityTokenAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintBondInstructionData = { discriminator: ReadonlyUint8Array };

export type MintBondInstructionDataArgs = {};

export function getMintBondInstructionDataEncoder(): FixedSizeEncoder<MintBondInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MINT_BOND_DISCRIMINATOR })
  );
}

export function getMintBondInstructionDataDecoder(): FixedSizeDecoder<MintBondInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMintBondInstructionDataCodec(): FixedSizeCodec<
  MintBondInstructionDataArgs,
  MintBondInstructionData
> {
  return combineCodec(
    getMintBondInstructionDataEncoder(),
    getMintBondInstructionDataDecoder()
  );
}

export type MintBondInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountMint extends string = string,
  TAccountValidatorIdentity extends string = string,
  TAccountValidatorIdentityTokenAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountMetadata extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountRent extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  bond: Address<TAccountBond>;
  mint: Address<TAccountMint>;
  validatorIdentity: Address<TAccountValidatorIdentity>;
  validatorIdentityTokenAccount: Address<TAccountValidatorIdentityTokenAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  metadata: Address<TAccountMetadata>;
  /** rent exempt payer of account creation */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  metadataProgram: Address<TAccountMetadataProgram>;
  rent?: Address<TAccountRent>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getMintBondInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountMint extends string,
  TAccountValidatorIdentity extends string,
  TAccountValidatorIdentityTokenAccount extends string,
  TAccountVoteAccount extends string,
  TAccountMetadata extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountRent extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: MintBondInput<
    TAccountConfig,
    TAccountBond,
    TAccountMint,
    TAccountValidatorIdentity,
    TAccountValidatorIdentityTokenAccount,
    TAccountVoteAccount,
    TAccountMetadata,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintBondInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountMint,
  TAccountValidatorIdentity,
  TAccountValidatorIdentityTokenAccount,
  TAccountVoteAccount,
  TAccountMetadata,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountMetadataProgram,
  TAccountRent,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    validatorIdentity: {
      value: input.validatorIdentity ?? null,
      isWritable: false,
    },
    validatorIdentityTokenAccount: {
      value: input.validatorIdentityTokenAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.validatorIdentity),
      getAccountMeta(accounts.validatorIdentityTokenAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getMintBondInstructionDataEncoder().encode({}),
    programAddress,
  } as MintBondInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountMint,
    TAccountValidatorIdentity,
    TAccountValidatorIdentityTokenAccount,
    TAccountVoteAccount,
    TAccountMetadata,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedMintBondInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    bond: TAccountMetas[1];
    mint: TAccountMetas[2];
    validatorIdentity: TAccountMetas[3];
    validatorIdentityTokenAccount: TAccountMetas[4];
    voteAccount: TAccountMetas[5];
    metadata: TAccountMetas[6];
    /** rent exempt payer of account creation */
    rentPayer: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    metadataProgram: TAccountMetas[11];
    rent: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: MintBondInstructionData;
};

export function parseMintBondInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintBondInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      mint: getNextAccount(),
      validatorIdentity: getNextAccount(),
      validatorIdentityTokenAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      metadata: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
      rent: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getMintBondInstructionDataDecoder().decode(instruction.data),
  };
}
