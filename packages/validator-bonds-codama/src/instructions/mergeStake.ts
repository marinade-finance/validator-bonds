/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const MERGE_STAKE_DISCRIMINATOR = new Uint8Array([
  14, 3, 146, 23, 163, 105, 246, 99,
])

export function getMergeStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MERGE_STAKE_DISCRIMINATOR)
}

export type MergeStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountSourceStake extends string | IAccountMeta<string> = string,
  TAccountDestinationStake extends string | IAccountMeta<string> = string,
  TAccountStakerAuthority extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TAccountClock extends string | IAccountMeta<string> = string,
  TAccountStakeProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSourceStake extends string
        ? WritableAccount<TAccountSourceStake>
        : TAccountSourceStake,
      TAccountDestinationStake extends string
        ? WritableAccount<TAccountDestinationStake>
        : TAccountDestinationStake,
      TAccountStakerAuthority extends string
        ? ReadonlyAccount<TAccountStakerAuthority>
        : TAccountStakerAuthority,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type MergeStakeInstructionData = {
  discriminator: ReadonlyUint8Array
  settlement: Address
}

export type MergeStakeInstructionDataArgs = { settlement: Address }

export function getMergeStakeInstructionDataEncoder(): Encoder<MergeStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settlement', getAddressEncoder()],
    ]),
    value => ({ ...value, discriminator: MERGE_STAKE_DISCRIMINATOR }),
  )
}

export function getMergeStakeInstructionDataDecoder(): Decoder<MergeStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settlement', getAddressDecoder()],
  ])
}

export function getMergeStakeInstructionDataCodec(): Codec<
  MergeStakeInstructionDataArgs,
  MergeStakeInstructionData
> {
  return combineCodec(
    getMergeStakeInstructionDataEncoder(),
    getMergeStakeInstructionDataDecoder(),
  )
}

export type MergeStakeInput<
  TAccountConfig extends string = string,
  TAccountSourceStake extends string = string,
  TAccountDestinationStake extends string = string,
  TAccountStakerAuthority extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountClock extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** the config account under which the bond was created */
  config: Address<TAccountConfig>
  sourceStake: Address<TAccountSourceStake>
  destinationStake: Address<TAccountDestinationStake>
  /** bonds program authority PDA address: settlement staker or bonds withdrawer */
  stakerAuthority: Address<TAccountStakerAuthority>
  stakeHistory: Address<TAccountStakeHistory>
  clock: Address<TAccountClock>
  stakeProgram: Address<TAccountStakeProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  settlement: MergeStakeInstructionDataArgs['settlement']
}

export function getMergeStakeInstruction<
  TAccountConfig extends string,
  TAccountSourceStake extends string,
  TAccountDestinationStake extends string,
  TAccountStakerAuthority extends string,
  TAccountStakeHistory extends string,
  TAccountClock extends string,
  TAccountStakeProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: MergeStakeInput<
    TAccountConfig,
    TAccountSourceStake,
    TAccountDestinationStake,
    TAccountStakerAuthority,
    TAccountStakeHistory,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): MergeStakeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountSourceStake,
  TAccountDestinationStake,
  TAccountStakerAuthority,
  TAccountStakeHistory,
  TAccountClock,
  TAccountStakeProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    sourceStake: { value: input.sourceStake ?? null, isWritable: true },
    destinationStake: {
      value: input.destinationStake ?? null,
      isWritable: true,
    },
    stakerAuthority: {
      value: input.stakerAuthority ?? null,
      isWritable: false,
    },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.sourceStake),
      getAccountMeta(accounts.destinationStake),
      getAccountMeta(accounts.stakerAuthority),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getMergeStakeInstructionDataEncoder().encode(
      args as MergeStakeInstructionDataArgs,
    ),
  } as MergeStakeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountSourceStake,
    TAccountDestinationStake,
    TAccountStakerAuthority,
    TAccountStakeHistory,
    TAccountClock,
    TAccountStakeProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedMergeStakeInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    /** the config account under which the bond was created */
    config: TAccountMetas[0]
    sourceStake: TAccountMetas[1]
    destinationStake: TAccountMetas[2]
    /** bonds program authority PDA address: settlement staker or bonds withdrawer */
    stakerAuthority: TAccountMetas[3]
    stakeHistory: TAccountMetas[4]
    clock: TAccountMetas[5]
    stakeProgram: TAccountMetas[6]
    eventAuthority: TAccountMetas[7]
    program: TAccountMetas[8]
  }
  data: MergeStakeInstructionData
}

export function parseMergeStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedMergeStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      sourceStake: getNextAccount(),
      destinationStake: getNextAccount(),
      stakerAuthority: getNextAccount(),
      stakeHistory: getNextAccount(),
      clock: getNextAccount(),
      stakeProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getMergeStakeInstructionDataDecoder().decode(instruction.data),
  }
}
