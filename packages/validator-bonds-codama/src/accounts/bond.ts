/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const BOND_DISCRIMINATOR = new Uint8Array([
  224, 128, 48, 251, 182, 246, 111, 196,
])

export function getBondDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BOND_DISCRIMINATOR)
}

export type Bond = {
  discriminator: ReadonlyUint8Array
  /** Program root config address. Validator bond is created for this config as PDA */
  config: Address
  /**
   * Validator vote address that this bond account is crated for
   * INVARIANTS:
   * - one bond account per validator vote address
   * - this program does NOT change stake account delegation voter_pubkey to any other validator vote account
   */
  voteAccount: Address
  /**
   * Authority that may close the bond or withdraw stake accounts associated with the bond
   * The same powers has got the owner of the validator vote account
   */
  authority: Address
  /**
   * Cost per mille per epoch.
   * This field represents the bid the bond (vote) account owner is willing to pay
   * for up to the `max_stake_wanted` being delegated.
   * The bid is in cost per mille per epoch similar to Google ads cpm system.
   * ---
   * The actual amount of lamports deducted from the bond account for the processed bid
   * is based on the actual delegated lamports during the epoch.
   */
  cpmpe: bigint
  /** PDA Bond address bump seed */
  bump: number
  /**
   * Maximum stake (in lamports) that the bond (vote) account owner requests.
   * This is the maximum stake that will be distributed to the vote account
   * when all other constraints are fulfilled (managed off-chain).
   * The vote account owner then goes to auction to obtain up to that maximum.
   * Use the `cpmpe` field to define the bid for this purpose.
   */
  maxStakeWanted: bigint
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export type BondArgs = {
  /** Program root config address. Validator bond is created for this config as PDA */
  config: Address
  /**
   * Validator vote address that this bond account is crated for
   * INVARIANTS:
   * - one bond account per validator vote address
   * - this program does NOT change stake account delegation voter_pubkey to any other validator vote account
   */
  voteAccount: Address
  /**
   * Authority that may close the bond or withdraw stake accounts associated with the bond
   * The same powers has got the owner of the validator vote account
   */
  authority: Address
  /**
   * Cost per mille per epoch.
   * This field represents the bid the bond (vote) account owner is willing to pay
   * for up to the `max_stake_wanted` being delegated.
   * The bid is in cost per mille per epoch similar to Google ads cpm system.
   * ---
   * The actual amount of lamports deducted from the bond account for the processed bid
   * is based on the actual delegated lamports during the epoch.
   */
  cpmpe: number | bigint
  /** PDA Bond address bump seed */
  bump: number
  /**
   * Maximum stake (in lamports) that the bond (vote) account owner requests.
   * This is the maximum stake that will be distributed to the vote account
   * when all other constraints are fulfilled (managed off-chain).
   * The vote account owner then goes to auction to obtain up to that maximum.
   * Use the `cpmpe` field to define the bid for this purpose.
   */
  maxStakeWanted: number | bigint
  /** reserve space for future extensions */
  reserved: ReadonlyUint8Array
}

export function getBondEncoder(): Encoder<BondArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getAddressEncoder()],
      ['voteAccount', getAddressEncoder()],
      ['authority', getAddressEncoder()],
      ['cpmpe', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['maxStakeWanted', getU64Encoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 134)],
    ]),
    value => ({ ...value, discriminator: BOND_DISCRIMINATOR }),
  )
}

export function getBondDecoder(): Decoder<Bond> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getAddressDecoder()],
    ['voteAccount', getAddressDecoder()],
    ['authority', getAddressDecoder()],
    ['cpmpe', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['maxStakeWanted', getU64Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 134)],
  ])
}

export function getBondCodec(): Codec<BondArgs, Bond> {
  return combineCodec(getBondEncoder(), getBondDecoder())
}

export function decodeBond<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Bond, TAddress>
export function decodeBond<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Bond, TAddress>
export function decodeBond<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Bond, TAddress> | MaybeAccount<Bond, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBondDecoder(),
  )
}

export async function fetchBond<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Bond, TAddress>> {
  const maybeAccount = await fetchMaybeBond(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeBond<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Bond, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeBond(maybeAccount)
}

export async function fetchAllBond(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Bond>[]> {
  const maybeAccounts = await fetchAllMaybeBond(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeBond(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Bond>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeBond(maybeAccount))
}

export function getBondSize(): number {
  return 255
}
