/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  type ParsedCancelSettlementInstruction,
  type ParsedCancelWithdrawRequestInstruction,
  type ParsedClaimSettlementV2Instruction,
  type ParsedClaimWithdrawRequestInstruction,
  type ParsedCloseSettlementV2Instruction,
  type ParsedConfigureBondInstruction,
  type ParsedConfigureBondWithMintInstruction,
  type ParsedConfigureConfigInstruction,
  type ParsedEmergencyPauseInstruction,
  type ParsedEmergencyResumeInstruction,
  type ParsedFundBondInstruction,
  type ParsedFundSettlementInstruction,
  type ParsedInitBondInstruction,
  type ParsedInitConfigInstruction,
  type ParsedInitSettlementInstruction,
  type ParsedInitWithdrawRequestInstruction,
  type ParsedMergeStakeInstruction,
  type ParsedMintBondInstruction,
  type ParsedResetStakeInstruction,
  type ParsedUpsizeSettlementClaimsInstruction,
  type ParsedWithdrawStakeInstruction,
} from '../instructions'

export const VALIDATOR_BONDS_PROGRAM_ADDRESS = '' as Address<''>

export enum ValidatorBondsAccount {
  SettlementClaim,
  Bond,
  Config,
  SettlementClaims,
  Settlement,
  WithdrawRequest,
}

export function identifyValidatorBondsAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): ValidatorBondsAccount {
  const data = 'data' in account ? account.data : account
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 103, 231, 246, 171, 99, 124, 133]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.SettlementClaim
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 128, 48, 251, 182, 246, 111, 196]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.Bond
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.Config
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([32, 130, 62, 175, 231, 54, 170, 114]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.SettlementClaims
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 11, 219, 33, 36, 136, 40, 182]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.Settlement
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([186, 239, 174, 191, 189, 13, 47, 196]),
      ),
      0,
    )
  ) {
    return ValidatorBondsAccount.WithdrawRequest
  }
  throw new Error(
    'The provided account could not be identified as a validatorBonds account.',
  )
}

export enum ValidatorBondsInstruction {
  InitConfig,
  ConfigureConfig,
  InitBond,
  ConfigureBond,
  ConfigureBondWithMint,
  MintBond,
  FundBond,
  InitWithdrawRequest,
  CancelWithdrawRequest,
  ClaimWithdrawRequest,
  InitSettlement,
  UpsizeSettlementClaims,
  CancelSettlement,
  FundSettlement,
  MergeStake,
  ResetStake,
  WithdrawStake,
  EmergencyPause,
  EmergencyResume,
  CloseSettlementV2,
  ClaimSettlementV2,
}

export function identifyValidatorBondsInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): ValidatorBondsInstruction {
  const data = 'data' in instruction ? instruction.data : instruction
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 235, 115, 232, 168, 96, 1, 231]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.InitConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 98, 161, 165, 137, 200, 230, 203]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ConfigureConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 93, 93, 181, 221, 36, 126, 64]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.InitBond
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 108, 79, 242, 82, 54, 105, 65]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ConfigureBond
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 189, 230, 39, 112, 33, 227, 8]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ConfigureBondWithMint
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([234, 94, 85, 225, 167, 102, 169, 32]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.MintBond
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 44, 212, 175, 30, 17, 68, 62]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.FundBond
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([142, 31, 222, 215, 83, 79, 34, 49]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.InitWithdrawRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 100, 110, 128, 113, 154, 224, 77]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.CancelWithdrawRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 232, 23, 52, 20, 134, 122, 118]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ClaimWithdrawRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([152, 178, 0, 65, 52, 210, 247, 58]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.InitSettlement
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 46, 34, 88, 141, 36, 63, 132]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.UpsizeSettlementClaims
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 241, 96, 62, 228, 178, 1, 120]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.CancelSettlement
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 146, 113, 34, 30, 92, 26, 19]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.FundSettlement
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([14, 3, 146, 23, 163, 105, 246, 99]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.MergeStake
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 37, 69, 159, 163, 139, 212, 235]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ResetStake
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 8, 22, 138, 105, 176, 87, 66]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.WithdrawStake
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 143, 27, 142, 200, 181, 210, 255]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.EmergencyPause
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 243, 48, 185, 6, 73, 190, 83]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.EmergencyResume
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([125, 212, 89, 37, 31, 244, 191, 179]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.CloseSettlementV2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 53, 132, 151, 88, 50, 52, 238]),
      ),
      0,
    )
  ) {
    return ValidatorBondsInstruction.ClaimSettlementV2
  }
  throw new Error(
    'The provided instruction could not be identified as a validatorBonds instruction.',
  )
}

export type ParsedValidatorBondsInstruction<TProgram extends string = ''> =
  | ({
      instructionType: ValidatorBondsInstruction.InitConfig
    } & ParsedInitConfigInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ConfigureConfig
    } & ParsedConfigureConfigInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.InitBond
    } & ParsedInitBondInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ConfigureBond
    } & ParsedConfigureBondInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ConfigureBondWithMint
    } & ParsedConfigureBondWithMintInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.MintBond
    } & ParsedMintBondInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.FundBond
    } & ParsedFundBondInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.InitWithdrawRequest
    } & ParsedInitWithdrawRequestInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.CancelWithdrawRequest
    } & ParsedCancelWithdrawRequestInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ClaimWithdrawRequest
    } & ParsedClaimWithdrawRequestInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.InitSettlement
    } & ParsedInitSettlementInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.UpsizeSettlementClaims
    } & ParsedUpsizeSettlementClaimsInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.CancelSettlement
    } & ParsedCancelSettlementInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.FundSettlement
    } & ParsedFundSettlementInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.MergeStake
    } & ParsedMergeStakeInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ResetStake
    } & ParsedResetStakeInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.WithdrawStake
    } & ParsedWithdrawStakeInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.EmergencyPause
    } & ParsedEmergencyPauseInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.EmergencyResume
    } & ParsedEmergencyResumeInstruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.CloseSettlementV2
    } & ParsedCloseSettlementV2Instruction<TProgram>)
  | ({
      instructionType: ValidatorBondsInstruction.ClaimSettlementV2
    } & ParsedClaimSettlementV2Instruction<TProgram>)
