name: Release
# Creates GitHub Release on tag push (e.g., v1.0.0) or manual trigger (attaches built packages as artifacts)
# This workflow does not publish to npm. For npm release: run `pnpm publish:all` locally

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: "Release version in format 'v1.0.0'"
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # from https://github.com/ochaloup/projectserum-build-docker
    container: docker.io/ochaloup/projectserum-build:v0.29.0_sol1.16.17_avm

    steps:
      - name: ⛺ /root/.cargo to PATH
        run: |
          echo '/root/.cargo/bin/' >> $GITHUB_PATH
          echo '/root/.avm/bin' >> $GITHUB_PATH
          ln -s /root/.avm $HOME/
          mkdir -p $HOME/.config
          ln -s /root/.config/solana $HOME/.config/

      - name: ⚓ Info on AVM
        run: |
          avm list
          avm use 0.29.0

      - name: 🏃‍♂️‍➡️ Checkout project
        uses: actions/checkout@v4

      - name: 👩‍🔧 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 👨‍🔧 Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 🌄 Set nightly toolchain
        run: rustup default nightly

      - name: 🎩 List rustup toolchains
        run: rustup toolchain list

      - name: Check solana config
        run: solana config get

      - name: 🏋️ Install and 🔨 build
        run: |
          pnpm install --frozen-lockfile
          pnpm build
          pnpm -r pack

      - name: 🔮 Determine tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: 🎉 Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '*.tgz'
          generateReleaseNotes: true
          tag: ${{ steps.tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
