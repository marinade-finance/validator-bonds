/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CANCEL_WITHDRAW_REQUEST_DISCRIMINATOR = new Uint8Array([
  167, 100, 110, 128, 113, 154, 224, 77,
])

export function getCancelWithdrawRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_WITHDRAW_REQUEST_DISCRIMINATOR,
  )
}

export type CancelWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBond extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountRentCollector extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBond extends string
        ? ReadonlyAccount<TAccountBond>
        : TAccountBond,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountWithdrawRequest extends string
        ? WritableAccount<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type CancelWithdrawRequestInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type CancelWithdrawRequestInstructionDataArgs = {}

export function getCancelWithdrawRequestInstructionDataEncoder(): Encoder<CancelWithdrawRequestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({
      ...value,
      discriminator: CANCEL_WITHDRAW_REQUEST_DISCRIMINATOR,
    }),
  )
}

export function getCancelWithdrawRequestInstructionDataDecoder(): Decoder<CancelWithdrawRequestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getCancelWithdrawRequestInstructionDataCodec(): Codec<
  CancelWithdrawRequestInstructionDataArgs,
  CancelWithdrawRequestInstructionData
> {
  return combineCodec(
    getCancelWithdrawRequestInstructionDataEncoder(),
    getCancelWithdrawRequestInstructionDataDecoder(),
  )
}

export type CancelWithdrawRequestInput<
  TAccountConfig extends string = string,
  TAccountBond extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountRentCollector extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: Address<TAccountConfig>
  bond: Address<TAccountBond>
  voteAccount: Address<TAccountVoteAccount>
  /** validator vote account validator identity or bond authority may ask for cancelling */
  authority: TransactionSigner<TAccountAuthority>
  withdrawRequest: Address<TAccountWithdrawRequest>
  rentCollector: Address<TAccountRentCollector>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getCancelWithdrawRequestInstruction<
  TAccountConfig extends string,
  TAccountBond extends string,
  TAccountVoteAccount extends string,
  TAccountAuthority extends string,
  TAccountWithdrawRequest extends string,
  TAccountRentCollector extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: CancelWithdrawRequestInput<
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountRentCollector,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CancelWithdrawRequestInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBond,
  TAccountVoteAccount,
  TAccountAuthority,
  TAccountWithdrawRequest,
  TAccountRentCollector,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    bond: { value: input.bond ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.bond),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.rentCollector),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCancelWithdrawRequestInstructionDataEncoder().encode({}),
  } as CancelWithdrawRequestInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBond,
    TAccountVoteAccount,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountRentCollector,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedCancelWithdrawRequestInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    config: TAccountMetas[0]
    bond: TAccountMetas[1]
    voteAccount: TAccountMetas[2]
    /** validator vote account validator identity or bond authority may ask for cancelling */
    authority: TAccountMetas[3]
    withdrawRequest: TAccountMetas[4]
    rentCollector: TAccountMetas[5]
    eventAuthority: TAccountMetas[6]
    program: TAccountMetas[7]
  }
  data: CancelWithdrawRequestInstructionData
}

export function parseCancelWithdrawRequestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCancelWithdrawRequestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      bond: getNextAccount(),
      voteAccount: getNextAccount(),
      authority: getNextAccount(),
      withdrawRequest: getNextAccount(),
      rentCollector: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCancelWithdrawRequestInstructionDataDecoder().decode(
      instruction.data,
    ),
  }
}
