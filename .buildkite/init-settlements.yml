agents:
  queue: "snapshots"

steps:
  # epoch number provided in ENV and then waiting for confirmation to proceed
  # or waiting to be prompted by the user after notification is sent
  - input: "What is the epoch to init settlements for?"
    fields:
      - text: "Epoch"
        key: "epoch"
        format: "[0-9]+"
    if: "build.env('EPOCH') == null"
  - command: "echo 'Epoch is: $EPOCH'"
    if: "build.env('EPOCH') != null"

  - wait: ~

  - label: ":mega: Notification initializing settlements"
    commands:
    - 'epoch=${EPOCH:-$(buildkite-agent meta-data get epoch)}'
    - 'buildkite-agent meta-data set epoch "$$epoch"'
    - 'echo "Epoch: $$epoch"'
    - |
      curl "$$DISCORD_WEBHOOK_VALIDATOR_BONDS" -H "Content-Type: application/json" -d '{
        "embeds": [
          {
            "title": "Confirm Settlements Initialization for Validator Bonds ('"$$epoch"').",
            "description": "Please review the 'Unblock' if ready to proceed.",
            "url": "'"$$BUILDKITE_BUILD_URL"'",
            "color": "8388863"
          }
        ]
      }'

  - block: "Confirm to get processed init settlements"
    prompt: "Please review the 'Unblock' if ready to proceed."
    if: "build.env('EPOCH') != null"

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin init-settlement'
    artifact_paths:
      - target/release/init-settlement

  - wait: ~

  - command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/init-settlements'
    concurrency: 1

  - wait: ~

  - label: ":floppy_disk: :arrow_left: :cloud: Downloading merkle trees"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
    commands:
    - 'epoch=$(buildkite-agent meta-data get epoch)'
    - |
      gcloud storage cp "$$gs_bucket/$$epoch/settlement-merkle-trees.json" "."
      gcloud storage cp "$$gs_bucket/$$epoch/settlements.json" "."
    artifact_paths:
      - "./settlement-merkle-trees.json"
      - "./settlements.json"

  - wait: ~

  - label: ":campfire: Create settlements"
    # env:
    #   RUST_LOG: trace
    #   RUST_BACKTRACE: full
    commands:
    - '. "$HOME/.cargo/env"'
    - 'epoch=$(buildkite-agent meta-data get epoch)'
    - 'prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))'
    - 'buildkite-agent artifact download --include-retried-jobs build-report.$$prior_build_number . || true'
    - |
      echo "This is attempt number $$BUILDKITE_RETRY_COUNT"
      cp "build-report.$$prior_build_number" "build-report.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "build-report.$$prior_build_number"
    - 'buildkite-agent artifact download --include-retried-jobs target/release/init-settlement .'
    - 'buildkite-agent artifact download --include-retried-jobs settlement-merkle-trees.json .'
    - 'buildkite-agent artifact download --include-retried-jobs settlements.json .'
    - 'chmod +x target/release/init-settlement'
    - 'echo "#ATTEMPT $$BUILDKITE_RETRY_COUNT" | tee -a "./build-report.$$BUILDKITE_RETRY_COUNT"'
    - |
      report=$(./target/release/init-settlement \
        --rpc-url $$RPC_URL \
        --input-merkle-tree-collection "./settlement-merkle-trees.json" \
        --input-settlement-collection "./settlements.json" \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$VALIDATOR_BONDS_FUNDING_WALLET" \
        --epoch "$$epoch" || true)
    - 'echo "$$report" | tee -a "./build-report.$$BUILDKITE_RETRY_COUNT"'
    - '[ -n "$$result_code" ] && echo "init-settlement command FAILED" && exit $$result_code'
    key: 'init-settlement'
    artifact_paths:
    - "./build-report.*"
    retry:
      automatic:
        - exit_status: '*'
          limit: 10

  - label: "Notification setup"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
    commands:
     - 'epoch=$(buildkite-agent meta-data get epoch)'
     - 'build_result=$(buildkite-agent step get "outcome" --step "init-settlement")'
     - |
        if [[ "$$build_result" =~ "failed" ]]; then
          notification_result="FAILED"
          notification_color="15158332"
        else
          notification_result="SUCCEEDED"
          notification_color="8388863"
        fi
     - 'buildkite-agent meta-data set notification_color "$$notification_color"'
     - 'buildkite-agent meta-data set notification_result "$$notification_result"'
     - 'echo "Notification result: $$notification_result, color: $$notification_color"'
     - 'mkdir ./reports'
     - 'buildkite-agent artifact download --include-retried-jobs "build-report.*" ./reports/'
     - 'report_path="./reports/$(ls -v1 reports/ | tail -n 1)"'
     - '[ -f "$$report_path" ] || echo "UNKNOWN ERROR" >> "$$report_path"'
     - 'gcloud storage cp "$$report_path" "$$gs_bucket/$$epoch/init-settlement-report.txt"'
     - 'buildkite-agent meta-data set attempts_count "$(grep -c "#ATTEMPT" "$$report_path")"'
     - 'buildkite-agent meta-data set report "$(cat "$$report_path")"'
    depends_on: "init-settlement"
    allow_dependency_failure: true

  - wait: ~
    continue_on_failure: true

  - label: ":mega: Notification settlements initialized"
    commands:
    - 'epoch=$(buildkite-agent meta-data get epoch)'
    - 'notification_result=$(buildkite-agent meta-data get notification_result)'
    - 'notification_color=$(buildkite-agent meta-data get notification_color)'
    - 'attempts_count=$(buildkite-agent meta-data get attempts_count)'
    - 'report=$(buildkite-agent meta-data get report)'
    - |
        escaped_report=$(jq -n --arg report "$$report" '"```"+$$report+"```"')
        curl "$$DISCORD_WEBHOOK_VALIDATOR_BONDS" -H "Content-Type: application/json" -d '{
          "embeds": [
            {
              "title": "Initializing Settlements for Validator Bonds ('"$$epoch"') '"$$notification_result"' after '"$$attempts_count"' attempts.",
              "url": "'"$$BUILDKITE_BUILD_URL"'",
              "color": "'"$$notification_color"'"
            }
          ],
          "content": '"$$escaped_report"',
          "attachments": []
        }'

  - command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/init-settlements'
    concurrency: 1
