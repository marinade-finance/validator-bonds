/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const SETTLEMENT_CLAIMS_DISCRIMINATOR = new Uint8Array([
  32, 130, 62, 175, 231, 54, 170, 114,
])

export function getSettlementClaimsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SETTLEMENT_CLAIMS_DISCRIMINATOR,
  )
}

export type SettlementClaims = {
  discriminator: ReadonlyUint8Array
  settlement: Address
  version: number
  maxRecords: bigint
}

export type SettlementClaimsArgs = {
  settlement: Address
  version: number
  maxRecords: number | bigint
}

export function getSettlementClaimsEncoder(): Encoder<SettlementClaimsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settlement', getAddressEncoder()],
      ['version', getU8Encoder()],
      ['maxRecords', getU64Encoder()],
    ]),
    value => ({ ...value, discriminator: SETTLEMENT_CLAIMS_DISCRIMINATOR }),
  )
}

export function getSettlementClaimsDecoder(): Decoder<SettlementClaims> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settlement', getAddressDecoder()],
    ['version', getU8Decoder()],
    ['maxRecords', getU64Decoder()],
  ])
}

export function getSettlementClaimsCodec(): Codec<
  SettlementClaimsArgs,
  SettlementClaims
> {
  return combineCodec(
    getSettlementClaimsEncoder(),
    getSettlementClaimsDecoder(),
  )
}

export function decodeSettlementClaims<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<SettlementClaims, TAddress>
export function decodeSettlementClaims<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<SettlementClaims, TAddress>
export function decodeSettlementClaims<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<SettlementClaims, TAddress>
  | MaybeAccount<SettlementClaims, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSettlementClaimsDecoder(),
  )
}

export async function fetchSettlementClaims<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<SettlementClaims, TAddress>> {
  const maybeAccount = await fetchMaybeSettlementClaims(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeSettlementClaims<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<SettlementClaims, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeSettlementClaims(maybeAccount)
}

export async function fetchAllSettlementClaims(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<SettlementClaims>[]> {
  const maybeAccounts = await fetchAllMaybeSettlementClaims(
    rpc,
    addresses,
    config,
  )
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeSettlementClaims(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<SettlementClaims>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map(maybeAccount => decodeSettlementClaims(maybeAccount))
}

export function getSettlementClaimsSize(): number {
  return 49
}
