/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_BONDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPSIZE_SETTLEMENT_CLAIMS_DISCRIMINATOR = new Uint8Array([
  207, 46, 34, 88, 141, 36, 63, 132,
]);

export function getUpsizeSettlementClaimsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPSIZE_SETTLEMENT_CLAIMS_DISCRIMINATOR
  );
}

export type UpsizeSettlementClaimsInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountSettlementClaims extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettlementClaims extends string
        ? WritableAccount<TAccountSettlementClaims>
        : TAccountSettlementClaims,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpsizeSettlementClaimsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpsizeSettlementClaimsInstructionDataArgs = {};

export function getUpsizeSettlementClaimsInstructionDataEncoder(): FixedSizeEncoder<UpsizeSettlementClaimsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPSIZE_SETTLEMENT_CLAIMS_DISCRIMINATOR,
    })
  );
}

export function getUpsizeSettlementClaimsInstructionDataDecoder(): FixedSizeDecoder<UpsizeSettlementClaimsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpsizeSettlementClaimsInstructionDataCodec(): FixedSizeCodec<
  UpsizeSettlementClaimsInstructionDataArgs,
  UpsizeSettlementClaimsInstructionData
> {
  return combineCodec(
    getUpsizeSettlementClaimsInstructionDataEncoder(),
    getUpsizeSettlementClaimsInstructionDataDecoder()
  );
}

export type UpsizeSettlementClaimsInput<
  TAccountSettlementClaims extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settlementClaims: Address<TAccountSettlementClaims>;
  /** rent exempt payer of account reallocation */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getUpsizeSettlementClaimsInstruction<
  TAccountSettlementClaims extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
>(
  input: UpsizeSettlementClaimsInput<
    TAccountSettlementClaims,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpsizeSettlementClaimsInstruction<
  TProgramAddress,
  TAccountSettlementClaims,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BONDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settlementClaims: {
      value: input.settlementClaims ?? null,
      isWritable: true,
    },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settlementClaims),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getUpsizeSettlementClaimsInstructionDataEncoder().encode({}),
    programAddress,
  } as UpsizeSettlementClaimsInstruction<
    TProgramAddress,
    TAccountSettlementClaims,
    TAccountRentPayer,
    TAccountSystemProgram
  >);
}

export type ParsedUpsizeSettlementClaimsInstruction<
  TProgram extends string = typeof VALIDATOR_BONDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settlementClaims: TAccountMetas[0];
    /** rent exempt payer of account reallocation */
    rentPayer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: UpsizeSettlementClaimsInstructionData;
};

export function parseUpsizeSettlementClaimsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpsizeSettlementClaimsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settlementClaims: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpsizeSettlementClaimsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
