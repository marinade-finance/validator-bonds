agents:
  queue: "snapshots"

steps:
  - label: ":closed_lock_with_key: Concurrency gate lock"
    command: echo "--> Start of concurrency gate"
    concurrency_group: 'validator-bonds/claim-settlements'
    concurrency: 1

  - wait: ~

  - label: ":hammer_and_wrench: :rust: Build claim-settlement"
    commands:
    - '. "$HOME/.cargo/env"'
    - 'cargo build --release --bin list-claimable-epoch'
    - 'cargo build --release --bin claim-settlement'
    artifact_paths:
      - target/release/list-claimable-epoch
      - target/release/claim-settlement

  - wait: ~

  - label: ":campfire: List claimable epochs"
    env:
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,builder_executor=debug,solana_transaction_executor=debug,settlement_pipelines=debug,list_claimable_epoch=debug
    commands:
    - '. "$HOME/.cargo/env"'
    - 'buildkite-agent artifact download --include-retried-jobs target/release/list-claimable-epoch .'
    - 'chmod +x target/release/list-claimable-epoch'
    - 'possible_epochs_json=$(./target/release/list-claimable-epoch --rpc-url $$RPC_URL)'
    - 'buildkite-agent meta-data set possible_epochs_json "$$possible_epochs_json"'

  - wait: ~

  - label: ":floppy_disk: :arrow_left: :cloud: Downloading all epochs merkle trees"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
      # epoch when the contract v2 was deployed, using different structure of merkle tree than v1
      starting_epoch_contract_v2: 640
    commands:
    - 'mkdir ./merkle-trees/'
    - 'possible_epochs_json=$(buildkite-agent meta-data get possible_epochs_json)'
    - 'possible_epochs_num=$(echo "$$possible_epochs_json" | jq "length")'
    - 'echo "Possible claimable epochs [$$possible_epochs_num]: $$possible_epochs_json"'
    - 'claimable_epochs_num=0'
    - 'claimable_epochs_json=()'
    - |
      for epoch in $(echo "$$possible_epochs_json" | jq ".[]"); do
        if [[ $$epoch -lt $$starting_epoch_contract_v2 ]]; then
          echo "Skipping epoch $$epoch, because it's before the contract v2 deployment epoch $$starting_epoch_contract_v2"
          continue
        fi
        claimable_epochs_num=$(($$claimable_epochs_num + 1))
        claimable_epochs_json+=($$epoch)
        gcloud storage cp "$$gs_bucket/$$epoch/settlement-merkle-trees.json" "./merkle-trees/$${epoch}_settlement-merkle-trees.json"
        gcloud storage cp "$$gs_bucket/$$epoch/settlements.json" "./merkle-trees/$${epoch}_settlements.json"
      done
      claimable_epochs_json=$(jq --compact-output --null-input '$ARGS.positional' --args -- "$${claimable_epochs_json[@]}")
    - 'buildkite-agent meta-data set claimable_epochs_json "$$claimable_epochs_json"'
    - 'buildkite-agent meta-data set claimable_epochs_num "$$claimable_epochs_num"'
    - 'echo "Claimable epochs [$$claimable_epochs_num]: $$claimable_epochs_json"'
    artifact_paths:
      - "./merkle-trees/*"

  - wait: ~

  # We need to wait for the fund-settlements trigger to get finished before we can proceed
  - label: ":gear: Upload and trigger fund-settlements pipeline"
    commands:
      - 'buildkite-agent pipeline upload .buildkite/fund-settlements.yml'

  - wait: ~
    continue_on_failure: true

  - label: ":campfire::arrow_right: Claim settlements"
    env:
      RUST_LOG: info,solana_transaction_builder_executor=debug,solana_transaction_builder=debug,builder_executor=debug,solana_transaction_executor=debug,settlement_pipelines=debug,claim_settlement=debug
      # RUST_BACKTRACE: full
    commands:
    - '. "$HOME/.cargo/env"'
    - |
      claimable_epochs_num=$(buildkite-agent meta-data get claimable_epochs_num || echo "0")
      if [[ $$claimable_epochs_num -eq 0 ]]; then
        echo 'No claimable settlement to claim from' | tee ./claiming-report.txt
        exit 0
      fi
    - 'prior_build_number=$(($$BUILDKITE_RETRY_COUNT - 1))'
    - 'buildkite-agent artifact download --include-retried-jobs claim-execution-report.$$prior_build_number . || true'
    - |
      cp "claim-execution-report.$$prior_build_number" "claim-execution-report.$$BUILDKITE_RETRY_COUNT" || true
      rm -f "claim-execution-report.$$prior_build_number"
      echo "#ATTEMPT $$BUILDKITE_RETRY_COUNT" | tee -a "./claim-execution-report.$$BUILDKITE_RETRY_COUNT"
    - 'buildkite-agent artifact download --include-retried-jobs "merkle-trees/*" .'
    - 'buildkite-agent artifact download --include-retried-jobs target/release/claim-settlement .'
    - 'chmod +x target/release/claim-settlement'
    - |
      set -o pipefail
      ./target/release/claim-settlement \
        --rpc-url $$RPC_URL \
        --settlement-json-files ./merkle-trees/* \
        --operator-authority "$$VALIDATOR_BONDS_OPERATOR_AUTHORITY" \
        --fee-payer "$$PSR_TX_FEE_WALLET" \
        | tee -a "./claim-execution-report.$$BUILDKITE_RETRY_COUNT"
    key: 'claim-settlement'
    artifact_paths:
    - "./claim-execution-report.*"
    retry:
      automatic:
        - exit_status: 100
          limit: 5

  - label: ":memo: Notification setup: Claim Settlements"
    env:
      gs_bucket: gs://marinade-validator-bonds-mainnet
    commands:
     - |
        build_result=$(buildkite-agent step get "outcome" --step "claim-settlement")
        if [[ -z "$$build_result" || "$$build_result" =~ "failed" ]]; then
          notification_result="finished with WARNINGS"
          notification_color="16355909"
        else
          notification_result="SUCCEEDED"
          notification_color="52224"
        fi
     - 'buildkite-agent meta-data set notification_color "$$notification_color"'
     - 'buildkite-agent meta-data set notification_result "$$notification_result"'
     - 'echo "Notification result: $$notification_result, color: $$notification_color"'
     - 'mkdir ./reports'
     - 'buildkite-agent artifact download --include-retried-jobs "claim-execution-report.*" ./reports/ || echo "No report ERROR" > ./reports/claim-execution-report.error'
     - 'report_path="./reports/$(ls -v1 reports/ | tail -n 1)"'
     - 'cp "$$report_path" ./claiming-report.txt'
     - 'claimable_epochs_json=$(buildkite-agent meta-data get claimable_epochs_json)'
     - 'first_epoch=$(echo "$$claimable_epochs_json" | jq ".[0]")'
     - '[[ -n "$$first_epoch" && "$$first_epoch" != "null" ]] && gcloud storage cp ./claiming-report.txt "$$gs_bucket/$$first_epoch/claiming-report.$(date +%s).txt"'
     - 'buildkite-agent meta-data set attempts_count "$(grep -c ATTEMPT ./claiming-report.txt)"'
    artifact_paths:
    - "./claiming-report.txt"
    key: 'notification-setup-claim'
    depends_on: "claim-settlement"
    allow_dependency_failure: true

  - wait: ~

  - label: ":mega: Notification Claiming"
    commands:
    - 'notification_result=$(buildkite-agent meta-data get notification_result || echo "UNKNOWN")'
    - 'notification_color=$(buildkite-agent meta-data get notification_color || echo "15158332")'
    - 'attempts_count=$(buildkite-agent meta-data get attempts_count || echo "UNKNOWN")'
    - 'buildkite-agent artifact download --include-retried-jobs claiming-report.txt . || echo "UNKNOWN ERROR" > claiming-report.txt'
    - 'claimable_epochs_json=$(buildkite-agent meta-data get claimable_epochs_json || echo "[]")'
    - |
      claimable_epochs=$(echo "$$claimable_epochs_json" | jq ". | join(\",\")" | tr -d '"')
      curl "$$DISCORD_WEBHOOK_VALIDATOR_BONDS" \
        -F 'payload_json={
            "embeds":[{
              "title": "Claim Settlements '"$$notification_result"' for epochs: '"$$claimable_epochs"' after '"$$attempts_count"' attempts",
              "url": "'"$$BUILDKITE_BUILD_URL"'",
              "color": "'"$$notification_color"'"
            }]
        }' \
        -F "file1=@./claiming-report.txt"
    - |
      build_result=$(buildkite-agent step get "outcome" --step "claim-settlement")
    depends_on: "notification-setup-claim"
    allow_dependency_failure: true

  - wait: ~

  - label: ":unlock: Concurrency gate unlock"
    command: echo "End of concurrency gate <--"
    concurrency_group: 'validator-bonds/claim-settlements'
    concurrency: 1
